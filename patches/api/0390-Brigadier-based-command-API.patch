From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Owen1212055 <23108066+Owen1212055@users.noreply.github.com>
Date: Mon, 1 Aug 2022 22:50:29 -0400
Subject: [PATCH] Brigadier based command API


diff --git a/build.gradle.kts b/build.gradle.kts
index e950bce5047552bdd3f5664eb24ce290b0a06225..e043ccc13d9570ae18685ebfbddbb0481e416221 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -46,6 +46,7 @@ dependencies {
     implementation("org.ow2.asm:asm-commons:9.2")
     // Paper end
 
+    api("com.mojang:brigadier:1.0.18") // Paper, expose!
     compileOnly("org.apache.maven:maven-resolver-provider:3.8.5")
     compileOnly("org.apache.maven.resolver:maven-resolver-connector-basic:1.7.3")
     compileOnly("org.apache.maven.resolver:maven-resolver-transport-http:1.7.3")
diff --git a/src/main/java/io/papermc/paper/command/brigadier/CommandBuilder.java b/src/main/java/io/papermc/paper/command/brigadier/CommandBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..34e062202b52a450951fc0eeac9a0813a3b42120
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/CommandBuilder.java
@@ -0,0 +1,86 @@
+package io.papermc.paper.command.brigadier;
+
+import com.mojang.brigadier.CommandDispatcher;
+import com.mojang.brigadier.builder.ArgumentBuilder;
+import com.mojang.brigadier.tree.RootCommandNode;
+import org.bukkit.Bukkit;
+import org.bukkit.plugin.Plugin;
+
+import java.util.Arrays;
+import java.util.List;
+
+public class CommandBuilder extends ArgumentBuilder<CommandSourceStack, CommandBuilder> {
+
+    private final Plugin plugin;
+    private final String literal;
+
+    private String description;
+    private List<String> aliases = List.of();
+
+    protected CommandBuilder(Plugin plugin, String literal) {
+        this.literal = literal;
+        this.plugin = plugin;
+    }
+
+    public static CommandBuilder of(Plugin plugin, String name) {
+        return new CommandBuilder(plugin, name);
+    }
+
+    public CommandBuilder aliases(String... aliases) {
+        this.aliases = Arrays.asList(aliases);
+        return this.getThis();
+    }
+
+    public String getDescription() {
+        return this.description;
+    }
+
+    public CommandBuilder description(String description) {
+        this.description = description;
+        return this;
+    }
+
+    public Plugin getPlugin() {
+        return this.plugin;
+    }
+
+    @Override
+    protected CommandBuilder getThis() {
+        return this;
+    }
+
+    @Override
+    public PluginCommandNode build() {
+        // See: LiteralArgumentBuilder
+        return new PluginCommandNode(this.literal, this);
+    }
+
+    public void register() {
+        this.register(Bukkit.getServer().getCommandDispatcher());
+    }
+
+    public void register(CommandDispatcher<CommandSourceStack> dispatcher) {
+        String identifier = this.plugin.getDescription().getName();
+        RootCommandNode<CommandSourceStack> dispatcherRoot = dispatcher.getRoot();
+        PluginCommandNode root = this.build();
+
+        dispatcherRoot.addChild(root);
+        // Add root redirect
+        this.registerRedirect(dispatcherRoot, root, identifier + ":" + this.literal);
+
+        // Add aliases
+        for (String alias : this.aliases) {
+            this.registerRedirect(dispatcherRoot, root, alias);
+            this.registerRedirect(dispatcherRoot, root, identifier + ":" + alias);
+        }
+    }
+
+    private void registerRedirect(RootCommandNode<CommandSourceStack> dispatcherRoot, PluginCommandNode node, String name) {
+        PluginCommandNode aliasRoot = CommandBuilder.of(this.plugin, name)
+            .description(this.description)
+            .redirect(node)
+            .build();
+
+        dispatcherRoot.addChild(aliasRoot);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/CommandSourceStack.java b/src/main/java/io/papermc/paper/command/brigadier/CommandSourceStack.java
new file mode 100644
index 0000000000000000000000000000000000000000..3d2ca2d0e092c1aa15adf7a32da8567c614aa43f
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/CommandSourceStack.java
@@ -0,0 +1,23 @@
+package io.papermc.paper.command.brigadier;
+
+import org.bukkit.Location;
+import org.bukkit.World;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Entity;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.Nullable;
+
+@ApiStatus.NonExtendable
+public interface CommandSourceStack {
+
+    @Nullable
+    Entity getBukkitEntity();
+
+    @Nullable
+    World getBukkitWorld();
+
+    @Nullable
+    Location getBukkitLocation();
+
+    CommandSender getBukkitSender();
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/MessageComponentSerializer.java b/src/main/java/io/papermc/paper/command/brigadier/MessageComponentSerializer.java
new file mode 100644
index 0000000000000000000000000000000000000000..839927c90a095674a332a8f61e3c279c4c08129a
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/MessageComponentSerializer.java
@@ -0,0 +1,18 @@
+package io.papermc.paper.command.brigadier;
+
+import com.mojang.brigadier.Message;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.serializer.ComponentSerializer;
+
+public interface MessageComponentSerializer extends ComponentSerializer<Component, Component, Message> {
+
+    /**
+     * A component serializer that converts it to a brigadier compatible type.
+     *
+     * @return serializer instance
+     */
+    static MessageComponentSerializer message() {
+        return MessageComponentSerializerHolder.PROVIDER;
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/MessageComponentSerializerHolder.java b/src/main/java/io/papermc/paper/command/brigadier/MessageComponentSerializerHolder.java
new file mode 100644
index 0000000000000000000000000000000000000000..61ee6e72643dbd1e46dce362adddc9936631df95
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/MessageComponentSerializerHolder.java
@@ -0,0 +1,10 @@
+package io.papermc.paper.command.brigadier;
+
+import java.util.ServiceLoader;
+
+class MessageComponentSerializerHolder {
+
+    public static final MessageComponentSerializer PROVIDER = ServiceLoader.load(MessageComponentSerializer.class)
+        .findFirst()
+        .orElseThrow();
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/PluginCommandNode.java b/src/main/java/io/papermc/paper/command/brigadier/PluginCommandNode.java
new file mode 100644
index 0000000000000000000000000000000000000000..d1809cfe836129e84ab8a1fe780fd2fe864ebd9e
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/PluginCommandNode.java
@@ -0,0 +1,34 @@
+package io.papermc.paper.command.brigadier;
+
+import com.mojang.brigadier.tree.CommandNode;
+import com.mojang.brigadier.tree.LiteralCommandNode;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.ApiStatus;
+
+@ApiStatus.Internal
+public class PluginCommandNode extends LiteralCommandNode<CommandSourceStack> {
+
+    private final Plugin plugin;
+    private final String description;
+
+    public PluginCommandNode(String literal, CommandBuilder builder) {
+        super(
+            literal, builder.getCommand(), builder.getRequirement(),
+            builder.getRedirect(), builder.getRedirectModifier(), builder.isFork()
+        );
+        this.plugin = builder.getPlugin();
+        this.description = builder.getDescription();
+
+        for (CommandNode<CommandSourceStack> argument : builder.getArguments()) {
+            this.addChild(argument);
+        }
+    }
+
+    public Plugin getPlugin() {
+        return this.plugin;
+    }
+
+    public String getDescription() {
+        return this.description;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/argument/SignedMessage.java b/src/main/java/io/papermc/paper/command/brigadier/argument/SignedMessage.java
new file mode 100644
index 0000000000000000000000000000000000000000..e13c4aa985ac9589d9990f1e34ae405f279ecbe8
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/argument/SignedMessage.java
@@ -0,0 +1,7 @@
+package io.papermc.paper.command.brigadier.argument;
+
+public interface SignedMessage {
+
+    String getSignedContent();
+
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/argument/VanillaArgumentProvider.java b/src/main/java/io/papermc/paper/command/brigadier/argument/VanillaArgumentProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..088d082adf18753122185639d9282bca0864c4ac
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/argument/VanillaArgumentProvider.java
@@ -0,0 +1,20 @@
+package io.papermc.paper.command.brigadier.argument;
+
+import com.mojang.brigadier.arguments.ArgumentType;
+import org.bukkit.block.BlockState;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.ApiStatus;
+
+import java.util.UUID;
+
+@ApiStatus.Internal
+interface VanillaArgumentProvider {
+
+    ArgumentType<ItemStack> itemStack();
+
+    ArgumentType<BlockState> blockState();
+
+    ArgumentType<SignedMessage> signedMessage();
+
+    ArgumentType<UUID> uuid();
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/argument/VanillaArguments.java b/src/main/java/io/papermc/paper/command/brigadier/argument/VanillaArguments.java
new file mode 100644
index 0000000000000000000000000000000000000000..a4cf7242dc1f2c206e3e21ffc5399aacf57d7c90
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/argument/VanillaArguments.java
@@ -0,0 +1,33 @@
+package io.papermc.paper.command.brigadier.argument;
+
+import com.mojang.brigadier.arguments.ArgumentType;
+import org.bukkit.block.BlockState;
+import org.bukkit.inventory.ItemStack;
+
+import java.util.ServiceLoader;
+import java.util.UUID;
+
+public final class VanillaArguments {
+
+    private static final VanillaArgumentProvider PROVIDER = ServiceLoader.load(VanillaArgumentProvider.class)
+        .findFirst()
+        .orElseThrow();
+
+    public static ArgumentType<ItemStack> itemStack() {
+        return PROVIDER.itemStack();
+    }
+
+    public static ArgumentType<BlockState> blockState() {
+        return PROVIDER.blockState();
+    }
+
+    public static ArgumentType<UUID> uuid() {
+        return PROVIDER.uuid();
+    }
+
+    public static ArgumentType<SignedMessage> signedMessage() {
+        return PROVIDER.signedMessage();
+    }
+
+
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/argument/WrapperArgumentType.java b/src/main/java/io/papermc/paper/command/brigadier/argument/WrapperArgumentType.java
new file mode 100644
index 0000000000000000000000000000000000000000..8be98ea599c864782198d0deddb22a6830425050
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/argument/WrapperArgumentType.java
@@ -0,0 +1,78 @@
+package io.papermc.paper.command.brigadier.argument;
+
+import com.mojang.brigadier.StringReader;
+import com.mojang.brigadier.arguments.ArgumentType;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+
+import java.util.Collection;
+
+/**
+ * An argument type that wraps around another argument.
+ * This argument is special in that the argument type that is wrapped will
+ * be sent to the client, not the wrapper itself.
+ *
+ * @param <T> type
+ * @param <B> base wrapping type
+ */
+public abstract class WrapperArgumentType<T, B> implements ArgumentType<T> {
+
+    private final ArgumentType<B> baseArgumentType;
+
+    public WrapperArgumentType(ArgumentType<B> baseArgumentType) {
+        this.baseArgumentType = baseArgumentType;
+    }
+
+    /**
+     * Parses the argument using the wrapped argument type then converting
+     * it.
+     * @param reader string reader
+     * @return value
+     * @throws CommandSyntaxException if an error occurs while parsing
+     */
+    @Override
+    public T parse(StringReader reader) throws CommandSyntaxException {
+        return this.convert(this.baseArgumentType.parse(reader));
+    }
+
+    /**
+     * Converts the type from the wrapped argument to this argument.
+     *
+     * @param baseType wrapped argument provided value
+     * @return converted value
+     * @throws CommandSyntaxException if an exception occurs while parsing
+     */
+    public abstract T convert(B baseType) throws CommandSyntaxException;
+
+    /**
+     * Gets the wrapped argument.
+     *
+     * @return wrapped
+     */
+    public ArgumentType<B> getWrapped() {
+        return this.baseArgumentType;
+    }
+
+    /**
+     * Cannot be controlled by the server.
+     * Returned in cases where there are multiple arguments in the same node.
+     * This helps differentiate and tell the player what the possible inputs are.
+     *
+     * @return client set examples
+     */
+    @Override
+    public final Collection<String> getExamples() {
+        return this.baseArgumentType.getExamples();
+    }
+
+    /**
+     * Returns if the argument itself should handle sugggestion
+     * parsing instead of the wrapper.
+     *
+     * @return handles suggestions
+     */
+    public boolean handleSuggestions() {
+        return false;
+    }
+
+
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/bukkit/BukkitCommandNode.java b/src/main/java/io/papermc/paper/command/brigadier/bukkit/BukkitCommandNode.java
new file mode 100644
index 0000000000000000000000000000000000000000..5c56e986ffe037498b339714c6c1db81452ece5e
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/bukkit/BukkitCommandNode.java
@@ -0,0 +1,127 @@
+package io.papermc.paper.command.brigadier.bukkit;
+
+import co.aikar.timings.Timing;
+import com.mojang.brigadier.arguments.StringArgumentType;
+import com.mojang.brigadier.builder.RequiredArgumentBuilder;
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import com.mojang.brigadier.suggestion.SuggestionProvider;
+import com.mojang.brigadier.suggestion.Suggestions;
+import com.mojang.brigadier.suggestion.SuggestionsBuilder;
+import com.mojang.brigadier.tree.LiteralCommandNode;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandException;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.ApiStatus;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.concurrent.CompletableFuture;
+import java.util.logging.Level;
+
+@ApiStatus.Internal
+public class BukkitCommandNode extends LiteralCommandNode<CommandSourceStack> {
+
+    private final Command command;
+
+    private BukkitCommandNode(String literal, Command command, BukkitBrigCommand bukkitBrigCommand) {
+        super(
+            literal, bukkitBrigCommand, s -> command.testPermissionSilent(s.getBukkitSender()),
+            null, null, false
+        );
+        this.command = command;
+    }
+
+    public static BukkitCommandNode of(String name, Command command) {
+        BukkitBrigCommand bukkitBrigCommand = new BukkitBrigCommand(command, name);
+        BukkitCommandNode commandNode = new BukkitCommandNode(name, command, bukkitBrigCommand);
+        commandNode.addChild(
+            RequiredArgumentBuilder.<CommandSourceStack, String>argument("args", StringArgumentType.greedyString()).suggests(BukkitBrigSuggestionProvider.INSTANCE).executes(bukkitBrigCommand).build()
+        );
+
+        return commandNode;
+    }
+
+    public Command getBukkitCommand() {
+        return this.command;
+    }
+
+    static class BukkitBrigCommand implements com.mojang.brigadier.Command<CommandSourceStack> {
+
+        private final org.bukkit.command.Command command;
+        private final String literal;
+
+        BukkitBrigCommand(org.bukkit.command.Command command, String literal) {
+            this.command = command;
+            this.literal = literal;
+        }
+
+        @Override
+        public int run(CommandContext<CommandSourceStack> context) throws CommandSyntaxException {
+            CommandSender sender = context.getSource().getBukkitSender();
+
+            // Plugins do weird things to workaround normal registration
+            if (this.command.timings == null) {
+                this.command.timings = co.aikar.timings.TimingsManager.getCommandTiming(null, this.command);
+            }
+
+            String[] args = org.apache.commons.lang3.StringUtils.split(context.getInput(), ' '); // fix adjacent spaces (from console/plugins) causing empty array elements
+
+            try (Timing ignored = this.command.timings.startTiming()) {
+                // Note: we don't return the result of target.execute as thats success / failure, we return handled (true) or not handled (false)
+                this.command.execute(sender, this.literal, Arrays.copyOfRange(args, 1, args.length));
+            }
+
+            // return true as command was handled
+            return 1;
+        }
+    }
+
+    static class BukkitBrigSuggestionProvider implements SuggestionProvider<CommandSourceStack> {
+
+        public static final SuggestionProvider<CommandSourceStack> INSTANCE = new BukkitBrigSuggestionProvider();
+
+        @Override
+        public CompletableFuture<Suggestions> getSuggestions(CommandContext<CommandSourceStack> context, SuggestionsBuilder builder) throws CommandSyntaxException {
+            // Paper start
+            org.bukkit.command.CommandSender sender = context.getSource().getBukkitSender();
+            if (!(sender instanceof org.bukkit.entity.Player player)) {
+                return CompletableFuture.completedFuture(builder.build());
+            }
+
+            String message = builder.getInput();
+            List<String> results = null;
+            Location pos = context.getSource().getBukkitLocation();
+            try {
+                if (message.startsWith("/")) {
+                    // Trim leading '/' if present (won't always be present in command blocks)
+                    message = message.substring(1);
+                }
+                if (pos == null) {
+                    results = Bukkit.getCommandMap().tabComplete(player, message);
+                } else {
+                    results = Bukkit.getCommandMap().tabComplete(player, message, pos.clone());
+                }
+            } catch (CommandException ex) {
+                player.sendMessage(ChatColor.RED + "An internal error occurred while attempting to tab-complete this command");
+                Bukkit.getServer().getLogger().log(Level.SEVERE, "Exception when " + player.getName() + " attempted to tab complete " + message, ex);
+            }
+
+            // Paper end
+
+            // Defaults to sub nodes, but we have just one giant args node, so offset accordingly
+            builder = builder.createOffset(builder.getInput().lastIndexOf(' ') + 1);
+
+            for (String s : results) {
+                builder.suggest(s);
+            }
+
+            return builder.buildFuture();
+        }
+    }
+
+}
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index 92a1462261029e804da73da2743bbd68e57841e9..6f67001ee605400969514a074faf4c703a79bab1 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -2302,6 +2302,7 @@ public final class Bukkit {
      *
      * @return the default message
      */
+    @Deprecated // Used only for bukkit commands
     @NotNull
     public static net.kyori.adventure.text.Component permissionMessage() {
         return server.permissionMessage();
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 56e261efa654e4a6872ccea28f0461df13845d13..0c43387738ca3aceb414cb660964e090bec5979d 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -2104,5 +2104,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @return the potion brewer
      */
     @NotNull org.bukkit.potion.PotionBrewer getPotionBrewer();
+
+    com.mojang.brigadier.CommandDispatcher<io.papermc.paper.command.brigadier.CommandSourceStack> getCommandDispatcher();
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/UnsafeValues.java b/src/main/java/org/bukkit/UnsafeValues.java
index 4fcafddf3792b66c618f91e04d102f374de565a8..dc0a707f2323d6544d84c8f620bcefc8270ac182 100644
--- a/src/main/java/org/bukkit/UnsafeValues.java
+++ b/src/main/java/org/bukkit/UnsafeValues.java
@@ -242,5 +242,9 @@ public interface UnsafeValues {
      * @throws IllegalArgumentException if {@link Material#isBlock()} is false
      */
     boolean isCollidable(@org.jetbrains.annotations.NotNull Material material);
+
+    org.bukkit.command.Command wrapBrigNode(com.mojang.brigadier.tree.CommandNode<?> commandNode);
+
+    java.util.Map<String, org.bukkit.command.Command> getCommandMirrorMap();
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/command/CommandMap.java b/src/main/java/org/bukkit/command/CommandMap.java
index 864c263bbd4dd6dd7c37a74b39b1a40a884d0731..d5c10484497a091c46923e186f0a075cbbf33f05 100644
--- a/src/main/java/org/bukkit/command/CommandMap.java
+++ b/src/main/java/org/bukkit/command/CommandMap.java
@@ -5,6 +5,7 @@ import org.bukkit.Location;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+@Deprecated // Paper
 public interface CommandMap {
 
     /**
diff --git a/src/main/java/org/bukkit/command/SimpleCommandMap.java b/src/main/java/org/bukkit/command/SimpleCommandMap.java
index b8623575b1c1b565560c2dd6438190716845a652..499b2f33747c5dd960ff869aabcccb87ca4e3fdb 100644
--- a/src/main/java/org/bukkit/command/SimpleCommandMap.java
+++ b/src/main/java/org/bukkit/command/SimpleCommandMap.java
@@ -5,7 +5,6 @@ import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -21,8 +20,9 @@ import org.bukkit.util.StringUtil;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+@Deprecated // Paper
 public class SimpleCommandMap implements CommandMap {
-    protected final Map<String, Command> knownCommands = new HashMap<String, Command>();
+    protected final Map<String, Command> knownCommands = org.bukkit.Bukkit.getUnsafe().getCommandMirrorMap();
     private final Server server;
 
     public SimpleCommandMap(@NotNull final Server server) {
@@ -129,7 +129,7 @@ public class SimpleCommandMap implements CommandMap {
      * {@inheritDoc}
      */
     @Override
-    public boolean dispatch(@NotNull CommandSender sender, @NotNull String commandLine) throws CommandException {
+        public boolean dispatch(@NotNull CommandSender sender, @NotNull String commandLine) throws CommandException {
         String[] args = org.apache.commons.lang3.StringUtils.split(commandLine, ' '); // Paper - fix adjacent spaces (from console/plugins) causing empty array elements
 
         if (args.length == 0) {
