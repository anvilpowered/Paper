From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Owen1212055 <23108066+Owen1212055@users.noreply.github.com>
Date: Mon, 1 Aug 2022 22:50:29 -0400
Subject: [PATCH] Brigadier based command API


diff --git a/build.gradle.kts b/build.gradle.kts
index 279a666e8ea2c07f41ee3f28b768e95dca5f0a10..51ca5d873e109e435255cc8a1204764b00e7adf3 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -46,7 +46,7 @@ dependencies {
     implementation("org.ow2.asm:asm:9.4")
     implementation("org.ow2.asm:asm-commons:9.4")
     // Paper end
-
+    api("com.mojang:brigadier:1.0.18") // Paper, expose!
     api("org.apache.maven:maven-resolver-provider:3.8.5") // Paper, expose
     compileOnly("org.apache.maven.resolver:maven-resolver-connector-basic:1.7.3")
     compileOnly("org.apache.maven.resolver:maven-resolver-transport-http:1.7.3")
diff --git a/src/main/java/io/papermc/paper/command/brigadier/CommandBuilder.java b/src/main/java/io/papermc/paper/command/brigadier/CommandBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..46bf23740aaa23ae51b1f5dbd8cf3c467afa7750
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/CommandBuilder.java
@@ -0,0 +1,94 @@
+package io.papermc.paper.command.brigadier;
+
+import com.mojang.brigadier.CommandDispatcher;
+import com.mojang.brigadier.builder.ArgumentBuilder;
+import com.mojang.brigadier.tree.CommandNode;
+import net.kyori.adventure.util.Services;
+import org.bukkit.Bukkit;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+@ApiStatus.NonExtendable
+public abstract class CommandBuilder extends ArgumentBuilder<CommandSourceStack, CommandBuilder> {
+
+    /**
+     * Creates a new command builder.
+     *
+     * @param plugin plugin
+     * @param name   command name
+     * @return builder
+     */
+    @NotNull
+    public static CommandBuilder of(@NotNull Plugin plugin, @NotNull String name) {
+        return ProviderHolder.PROVIDER.create(plugin, name);
+    }
+
+    /**
+     * Sets the aliases for this command.
+     *
+     * @param aliases alises
+     * @return self
+     */
+    @NotNull
+    public abstract CommandBuilder aliases(@NotNull String... aliases);
+
+    /**
+     * Gets the description for this command.
+     *
+     * @return description
+     */
+    @Nullable
+    public abstract String getDescription();
+
+    /**
+     * Sets the description for this command.
+     *
+     * @param description description
+     * @return self
+     */
+    @NotNull
+    public abstract CommandBuilder description(@Nullable String description);
+
+    /**
+     * Gets the plugin set for this command builder.
+     *
+     * @return self
+     */
+    @NotNull
+    public abstract Plugin getPlugin();
+
+    /**
+     * Builds the underlying command argument node directly.
+     * @return command argument node
+     * @deprecated It is discouraged from directly using this command node. See {@link CommandBuilder#register()}
+     */
+    @Deprecated
+    @Override
+    public abstract CommandNode<CommandSourceStack> build();
+
+    /**
+     * Registers this command builder into the server
+     * dispatcher.
+     * @return if the command was registered and added to the command map in some form (e.g. no command collisions)
+     */
+    public boolean register() {
+        return this.register(Bukkit.getServer().getCommandDispatcher());
+    }
+
+    /**
+     * Registers the command builder into the specified dispatcher.
+     *
+     * @param dispatcher dispatcher
+     * @return if the command was registered and added to the command map in some form (e.g. no command collisions)
+     */
+    public abstract boolean register(@NotNull CommandDispatcher<CommandSourceStack> dispatcher);
+
+    @ApiStatus.Internal
+    private static class ProviderHolder {
+
+        private static final CommandBuilderProvider PROVIDER = Services.service(CommandBuilderProvider.class)
+            .orElseThrow();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/CommandBuilderProvider.java b/src/main/java/io/papermc/paper/command/brigadier/CommandBuilderProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..1f5a17fc682948baf83122285c6dfc8c7e8dbf16
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/CommandBuilderProvider.java
@@ -0,0 +1,9 @@
+package io.papermc.paper.command.brigadier;
+
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.ApiStatus;
+
+@ApiStatus.Internal
+public interface CommandBuilderProvider {
+    CommandBuilder create(Plugin plugin, String name);
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/CommandSourceStack.java b/src/main/java/io/papermc/paper/command/brigadier/CommandSourceStack.java
new file mode 100644
index 0000000000000000000000000000000000000000..fc88435a149918b2675d94b80d659ab0051f5541
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/CommandSourceStack.java
@@ -0,0 +1,65 @@
+package io.papermc.paper.command.brigadier;
+
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import io.papermc.paper.command.brigadier.argument.ArgumentResolver;
+import org.bukkit.Location;
+import org.bukkit.World;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Entity;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * Represents a vanilla command source stack which is used
+ * for command execution.
+ */
+@ApiStatus.NonExtendable
+@ApiStatus.Experimental
+public interface CommandSourceStack {
+
+    /**
+     * Gets the bukkit entity running this command.
+     * @return bukkit entity, null if not present
+     */
+    @Nullable
+    Entity getBukkitEntity();
+
+    /**
+     * Gets the world that this command is being executed in.
+     * @return world
+     */
+    @Nullable
+    World getBukkitWorld();
+
+    /**
+     * Gets the location that this command is being executed in.
+     * @return location
+     */
+    @Nullable
+    Location getBukkitLocation();
+
+    /**
+     * Gets the sender representing this source stack.
+     * @return source stack sender
+     */
+    @NotNull
+    CommandSender getBukkitSender();
+
+    /**
+     * Resolves an argument in this command source stack.
+     *
+     * @param context command context
+     * @param name name of argument
+     * @return resolved argument
+     * @param <V> resolved argument type
+     */
+    @NotNull
+    @SuppressWarnings("unchecked")
+    default <V> V getResolvedArgument(@NotNull CommandContext<CommandSourceStack> context, @NotNull final String name) throws CommandSyntaxException {
+        ArgumentResolver<?> resolver = context.getArgument(name, ArgumentResolver.class);
+        return (V) resolver.resolve(this);
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/MessageComponentSerializer.java b/src/main/java/io/papermc/paper/command/brigadier/MessageComponentSerializer.java
new file mode 100644
index 0000000000000000000000000000000000000000..94305f3f35d5f807381dcd3b26200f86cb0816e8
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/MessageComponentSerializer.java
@@ -0,0 +1,33 @@
+package io.papermc.paper.command.brigadier;
+
+import com.mojang.brigadier.Message;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.serializer.ComponentSerializer;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.ServiceLoader;
+
+/**
+ * A component serializer that converts it to a brigadier compatible type.
+ */
+public interface MessageComponentSerializer extends ComponentSerializer<Component, Component, Message> {
+
+    /**
+     * A component serializer that converts it to a brigadier compatible type.
+     *
+     * @return serializer instance
+     */
+    @NotNull
+    static MessageComponentSerializer message() {
+        return Holder.PROVIDER;
+    }
+
+
+    @ApiStatus.Internal
+    class Holder {
+        public static final MessageComponentSerializer PROVIDER = ServiceLoader.load(MessageComponentSerializer.class)
+            .findFirst()
+            .orElseThrow();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/argument/ArgumentResolver.java b/src/main/java/io/papermc/paper/command/brigadier/argument/ArgumentResolver.java
new file mode 100644
index 0000000000000000000000000000000000000000..14ff48fb772a9f0ca9a3d37f8a600a39d1d14a8c
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/argument/ArgumentResolver.java
@@ -0,0 +1,24 @@
+package io.papermc.paper.command.brigadier.argument;
+
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Represents an argument which requires
+ * the context of a command source stack to be fully resolved.
+ * @param <T> type
+ */
+@ApiStatus.Experimental
+public interface ArgumentResolver<T> {
+
+    /**
+     * Resolves the argument with the given
+     * command source stack.
+     * @param sourceStack source stack
+     * @return resolved
+     */
+    @NotNull
+    T resolve(@NotNull CommandSourceStack sourceStack) throws CommandSyntaxException;
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/argument/MessageArgumentResponse.java b/src/main/java/io/papermc/paper/command/brigadier/argument/MessageArgumentResponse.java
new file mode 100644
index 0000000000000000000000000000000000000000..8a39d092b9d54a7ab4f4e0f65f0c4b59db1e5db9
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/argument/MessageArgumentResponse.java
@@ -0,0 +1,41 @@
+package io.papermc.paper.command.brigadier.argument;
+
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import net.kyori.adventure.chat.SignedMessage;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.concurrent.CompletableFuture;
+
+/**
+ * Argument type returned from the Message argument.
+ */
+@ApiStatus.Experimental
+public interface MessageArgumentResponse {
+
+    /**
+     * Content of the message
+     *
+     * @return player made message
+     */
+    @NotNull
+    String content();
+
+    /**
+     * Resolves a signed message from this response.
+     * This will use context stored in the command source stack
+     * and signed arguments sent from the client.
+     * <p>
+     * In the case that signed message information isn't provided, a "system"
+     * signed message will be provided instead.
+     * @param argumentName argument name
+     * @param context context
+     * @return signed message
+     * @throws CommandSyntaxException syntax exception
+     */
+    @NotNull
+    CompletableFuture<SignedMessage> resolveSignedMessage(@NotNull String argumentName, @NotNull CommandContext<CommandSourceStack> context) throws CommandSyntaxException;
+
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/argument/VanillaArguments.java b/src/main/java/io/papermc/paper/command/brigadier/argument/VanillaArguments.java
new file mode 100644
index 0000000000000000000000000000000000000000..e43ce009c0245f008fa716e8f8bb6c13b8285cd0
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/argument/VanillaArguments.java
@@ -0,0 +1,190 @@
+package io.papermc.paper.command.brigadier.argument;
+
+import com.destroystokyo.paper.profile.PlayerProfile;
+import com.mojang.brigadier.arguments.ArgumentType;
+import io.papermc.paper.math.BlockPosition;
+import net.kyori.adventure.text.Component;
+import org.bukkit.Color;
+import org.bukkit.block.BlockState;
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Collection;
+import java.util.ServiceLoader;
+import java.util.UUID;
+
+/**
+ * Vanilla argument registry
+ * <p>
+ * These provide rich argument parsing on the client and
+ * may also provide additional signing context.
+ */
+@ApiStatus.Experimental
+public final class VanillaArguments {
+
+    @NotNull
+    private static final VanillaArgumentProvider PROVIDER = ServiceLoader.load(VanillaArgumentProvider.class)
+        .findFirst()
+        .orElseThrow();
+
+    /**
+     * An ItemStack argument which provides rich parsing for
+     * specifying item material and item NBT information.
+     *
+     * @return argument
+     */
+    @NotNull
+    public static ArgumentType<ItemStack> itemStack() {
+        return PROVIDER.itemStack();
+    }
+
+    /**
+     * A blockstate argument which will provide rich parsing for specifying
+     * the specific block variant and then the block entity NBT if applicable.
+     *
+     * @return argument
+     */
+    @NotNull
+    public static ArgumentType<BlockState> blockState() {
+        return PROVIDER.blockState();
+    }
+
+    /**
+     * A uuid argument.
+     *
+     * @return argument
+     */
+    @NotNull
+    public static ArgumentType<UUID> uuid() {
+        return PROVIDER.uuid();
+    }
+
+    /**
+     * Represents a selector that can capture any
+     * entity.
+     *
+     * @return argument that takes one entity
+     */
+    @NotNull
+    public static ArgumentType<ArgumentResolver<Entity>> entity() {
+        return PROVIDER.entity();
+    }
+
+    /**
+     * Represents a selector that can capture multiple
+     * entities.
+     *
+     * @return argument that takes multiple entities
+     */
+    @NotNull
+    public static ArgumentType<ArgumentResolver<Collection<Entity>>> entities() {
+        return PROVIDER.entities();
+    }
+
+    /**
+     * Represents a selector that can capture a
+     * player entity.
+     *
+     * @return argument that takes one player
+     */
+    @NotNull
+    public static ArgumentType<ArgumentResolver<Player>> player() {
+        return PROVIDER.player();
+    }
+
+    /**
+     * Represents a selector that can capture multiple
+     * player entities.
+     *
+     * @return argument that takes multiple players
+     */
+    @NotNull
+    public static ArgumentType<ArgumentResolver<Collection<Player>>> players() {
+        return PROVIDER.players();
+    }
+
+    /**
+     * Represents a selector that provides list
+     * of player profiles
+     *
+     * @return player profile arguments
+     */
+    @NotNull
+    public static ArgumentType<ArgumentResolver<Collection<PlayerProfile>>> playerProfiles() {
+        return PROVIDER.playerProfiles();
+    }
+
+    /**
+     * A block position argument.
+     *
+     * @return argument
+     */
+    @NotNull
+    public static ArgumentType<ArgumentResolver<BlockPosition>> blockPos() {
+        return PROVIDER.blockPos();
+    }
+
+    /**
+     * A signed message argument.
+     * This argument can be resolved to retreieve the underlying
+     * signed message.
+     *
+     * @return argument
+     */
+    @NotNull
+    public static ArgumentType<MessageArgumentResponse> signedMessage() {
+        return PROVIDER.signedMessage();
+    }
+
+
+    /**
+     * A component argument.
+     *
+     * @return argument
+     */
+    @NotNull
+    public static ArgumentType<Component> component() {
+        return PROVIDER.component();
+    }
+
+    @ApiStatus.Internal
+    interface VanillaArgumentProvider {
+
+        @NotNull
+        ArgumentType<ItemStack> itemStack();
+
+        @NotNull
+        ArgumentType<BlockState> blockState();
+
+        @NotNull
+        ArgumentType<MessageArgumentResponse> signedMessage();
+
+        @NotNull
+        ArgumentType<UUID> uuid();
+
+        @NotNull
+        ArgumentType<ArgumentResolver<Entity>> entity();
+
+        @NotNull
+        ArgumentType<ArgumentResolver<Player>> player();
+
+        @NotNull
+        ArgumentType<ArgumentResolver<Collection<Entity>>> entities();
+
+        @NotNull
+        ArgumentType<ArgumentResolver<Collection<Player>>> players();
+
+        @NotNull
+        ArgumentType<ArgumentResolver<Collection<PlayerProfile>>> playerProfiles();
+
+        @NotNull
+        ArgumentType<ArgumentResolver<BlockPosition>> blockPos();
+
+        @NotNull
+        ArgumentType<Component> component();
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/argument/WrapperArgumentType.java b/src/main/java/io/papermc/paper/command/brigadier/argument/WrapperArgumentType.java
new file mode 100644
index 0000000000000000000000000000000000000000..a4cdba3967813337e4c3a0a9ba8b1cd9e2769be8
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/argument/WrapperArgumentType.java
@@ -0,0 +1,86 @@
+package io.papermc.paper.command.brigadier.argument;
+
+import com.mojang.brigadier.StringReader;
+import com.mojang.brigadier.arguments.ArgumentType;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Collection;
+
+/**
+ * An argument type that wraps around another argument.
+ * This argument is special in that the argument type that is wrapped will
+ * be sent to the client, not the wrapper itself.
+ *
+ * @param <T> type
+ * @param <B> base wrapping type
+ */
+@ApiStatus.Experimental
+public abstract class WrapperArgumentType<T, B> implements ArgumentType<T> {
+
+    @NotNull
+    private final ArgumentType<B> vanillaPrimitiveType;
+
+    public WrapperArgumentType(@NotNull ArgumentType<B> primitive) {
+        this.vanillaPrimitiveType = primitive;
+    }
+
+    /**
+     * Parses the argument using the wrapped argument type then converting
+     * it.
+     * @param reader string reader
+     * @return value
+     * @throws CommandSyntaxException if an error occurs while parsing
+     */
+    @NotNull
+    @Override
+    public T parse(@NotNull StringReader reader) throws CommandSyntaxException {
+        return this.convert(this.vanillaPrimitiveType.parse(reader));
+    }
+
+    /**
+     * Converts the type from the wrapped argument to this argument.
+     *
+     * @param baseType wrapped argument provided value
+     * @return converted value
+     * @throws CommandSyntaxException if an exception occurs while parsing
+     */
+    @NotNull
+    public abstract T convert(@NotNull B baseType) throws CommandSyntaxException;
+
+    /**
+     * Gets the wrapped argument.
+     *
+     * @return wrapped
+     */
+    @NotNull
+    public ArgumentType<B> getWrapped() {
+        return this.vanillaPrimitiveType;
+    }
+
+    /**
+     * Cannot be controlled by the server.
+     * Returned in cases where there are multiple arguments in the same node.
+     * This helps differentiate and tell the player what the possible inputs are.
+     *
+     * @return client set examples
+     */
+    @NotNull
+    @Override
+    public final Collection<String> getExamples() {
+        return this.vanillaPrimitiveType.getExamples();
+    }
+
+    /**
+     * Returns if the argument itself should handle sugggestion
+     * parsing instead of the wrapper.
+     *
+     * @return handles suggestions
+     */
+    public boolean handleSuggestions() {
+        return false;
+    }
+
+
+}
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index 15a9993c2705e2dcc0366394ded57acffab589c0..d8c05f5b931c8f7b26c6cc50dab3df335e76c32e 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -2334,6 +2334,7 @@ public final class Bukkit {
      * @return the default message
      */
     @NotNull
+    @Deprecated // Used only for bukkit commands
     public static net.kyori.adventure.text.Component permissionMessage() {
         return server.permissionMessage();
     }
@@ -2454,6 +2455,11 @@ public final class Bukkit {
     public static @NotNull org.bukkit.potion.PotionBrewer getPotionBrewer() {
         return server.getPotionBrewer();
     }
+
+    @NotNull
+    public static com.mojang.brigadier.CommandDispatcher<io.papermc.paper.command.brigadier.CommandSourceStack> getCommandDispatcher() {
+        return server.getCommandDispatcher();
+    }
     // Paper end
 
     @NotNull
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 9f7029d327b55c8b1b9cfef8ea2678b87dad8ddb..f6062473ad743083849a5d51d1299ee5e24b64c5 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -2029,6 +2029,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      *
      * @return the default message
      */
+    @Deprecated // Paper - only used for bukkit commands
     @NotNull net.kyori.adventure.text.Component permissionMessage();
 
     /**
@@ -2134,5 +2135,8 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @return the potion brewer
      */
     @NotNull org.bukkit.potion.PotionBrewer getPotionBrewer();
+
+    @NotNull
+    com.mojang.brigadier.CommandDispatcher<io.papermc.paper.command.brigadier.CommandSourceStack> getCommandDispatcher();
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/UnsafeValues.java b/src/main/java/org/bukkit/UnsafeValues.java
index b92255a9c87620f46adb140689b1cd328a476d61..50807b2718676335d981aaca6697718fce49781f 100644
--- a/src/main/java/org/bukkit/UnsafeValues.java
+++ b/src/main/java/org/bukkit/UnsafeValues.java
@@ -244,5 +244,7 @@ public interface UnsafeValues {
      * @throws IllegalStateException if no biome by the given key is registered.
      */
     void setBiomeKey(RegionAccessor accessor, int x, int y, int z, NamespacedKey biomeKey);
+
+    java.util.Map<String, org.bukkit.command.Command> getCommandMirrorMap();
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/command/Command.java b/src/main/java/org/bukkit/command/Command.java
index b791358f90fe92bc2264d9a26492245763813af3..28fc568a033f0c8c58292983b5b5f2adec1987c9 100644
--- a/src/main/java/org/bukkit/command/Command.java
+++ b/src/main/java/org/bukkit/command/Command.java
@@ -488,4 +488,12 @@ public abstract class Command {
     public String toString() {
         return getClass().getName() + '(' + name + ')';
     }
+
+    // Paper start
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public boolean canBeOverriden() { return false; }
+
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public String registeredNamespace;
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/command/CommandMap.java b/src/main/java/org/bukkit/command/CommandMap.java
index 864c263bbd4dd6dd7c37a74b39b1a40a884d0731..88d92350b59333c2148190c5e4974f254b0139a9 100644
--- a/src/main/java/org/bukkit/command/CommandMap.java
+++ b/src/main/java/org/bukkit/command/CommandMap.java
@@ -5,6 +5,7 @@ import org.bukkit.Location;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+@Deprecated(forRemoval = true) // Paper
 public interface CommandMap {
 
     /**
diff --git a/src/main/java/org/bukkit/command/FormattedCommandAlias.java b/src/main/java/org/bukkit/command/FormattedCommandAlias.java
index 9d4f553c04784cca63901a56a7aea62a5cae1d72..abe256e1e45ce28036da4aa1586715bc8a1a3414 100644
--- a/src/main/java/org/bukkit/command/FormattedCommandAlias.java
+++ b/src/main/java/org/bukkit/command/FormattedCommandAlias.java
@@ -117,7 +117,7 @@ public class FormattedCommandAlias extends Command {
             index = formatString.indexOf('$', index);
         }
 
-        return formatString;
+        return formatString.trim(); // Paper - Causes an extra space at the end, breaks with brig commands
     }
 
     @NotNull
diff --git a/src/main/java/org/bukkit/command/SimpleCommandMap.java b/src/main/java/org/bukkit/command/SimpleCommandMap.java
index ac9a28922f8a556944a4c3649d74c32c622f0cb0..6abf192bf7d3102a72595e5b8090a13b88ab30f7 100644
--- a/src/main/java/org/bukkit/command/SimpleCommandMap.java
+++ b/src/main/java/org/bukkit/command/SimpleCommandMap.java
@@ -21,11 +21,20 @@ import org.bukkit.util.StringUtil;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+@Deprecated // Paper
 public class SimpleCommandMap implements CommandMap {
-    protected final Map<String, Command> knownCommands = new HashMap<String, Command>();
+    protected Map<String, Command> knownCommands; // Paper
     private final Server server;
 
     public SimpleCommandMap(@NotNull final Server server) {
+    // Paper start
+        this(server, org.bukkit.Bukkit.getUnsafe().getCommandMirrorMap());
+    }
+
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public SimpleCommandMap(@NotNull final Server server, Map<String, Command> backing) {
+        this.knownCommands = backing;
+    // Paper end
         this.server = server;
         setDefaultCommands();
     }
@@ -101,8 +110,12 @@ public class SimpleCommandMap implements CommandMap {
      * @return true if command was registered, false otherwise.
      */
     private synchronized boolean register(@NotNull String label, @NotNull Command command, boolean isAlias, @NotNull String fallbackPrefix) {
+        command.registeredNamespace = fallbackPrefix; // Paper
         knownCommands.put(fallbackPrefix + ":" + label, command);
-        if ((command instanceof BukkitCommand || isAlias) && knownCommands.containsKey(label)) {
+        // Paper start
+        Command known = knownCommands.get(label);
+        if ((command instanceof BukkitCommand || isAlias) && (known != null && !known.canBeOverriden())) {
+        // Paper end
             // Request is for an alias/fallback command and it conflicts with
             // a existing command or previous alias ignore it
             // Note: This will mean it gets removed from the commands list of active aliases
@@ -114,7 +127,9 @@ public class SimpleCommandMap implements CommandMap {
         // If the command exists but is an alias we overwrite it, otherwise we return
         Command conflict = knownCommands.get(label);
         if (conflict != null && conflict.getLabel().equals(label)) {
+            if (!conflict.canBeOverriden()) { // Paper
             return false;
+            } // Paper
         }
 
         if (!isAlias) {
