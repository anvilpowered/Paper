From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Owen1212055 <23108066+Owen1212055@users.noreply.github.com>
Date: Mon, 1 Aug 2022 22:50:34 -0400
Subject: [PATCH] Brigadier based command API


diff --git a/src/main/java/com/mojang/brigadier/tree/CommandNode.java b/src/main/java/com/mojang/brigadier/tree/CommandNode.java
index d65defd5fc54086a969c568b93dfb05f40dd5a44..c45ff583490d82471e9115deb032f084b7586139 100644
--- a/src/main/java/com/mojang/brigadier/tree/CommandNode.java
+++ b/src/main/java/com/mojang/brigadier/tree/CommandNode.java
@@ -41,6 +41,13 @@ public abstract class CommandNode<S> implements Comparable<CommandNode<S>> {
         this.arguments.remove(name);
     }
     // CraftBukkit end
+    // Paper start
+    public void clearAll() {
+        this.children.clear();
+        this.literals.clear();
+        this.arguments.clear();
+    }
+    // Paper end
 
     protected CommandNode(final Command<S> command, final Predicate<S> requirement, final CommandNode<S> redirect, final RedirectModifier<S> modifier, final boolean forks) {
         this.command = command;
diff --git a/src/main/java/io/papermc/paper/command/brigadier/ApiForwardingRootNode.java b/src/main/java/io/papermc/paper/command/brigadier/ApiForwardingRootNode.java
new file mode 100644
index 0000000000000000000000000000000000000000..857b63a474a51cb541d88ea6224202e9a8a72b44
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/ApiForwardingRootNode.java
@@ -0,0 +1,122 @@
+package io.papermc.paper.command.brigadier;
+
+import com.mojang.brigadier.CommandDispatcher;
+import com.mojang.brigadier.arguments.ArgumentType;
+import com.mojang.brigadier.arguments.BoolArgumentType;
+import com.mojang.brigadier.arguments.DoubleArgumentType;
+import com.mojang.brigadier.arguments.FloatArgumentType;
+import com.mojang.brigadier.arguments.IntegerArgumentType;
+import com.mojang.brigadier.arguments.LongArgumentType;
+import com.mojang.brigadier.arguments.StringArgumentType;
+import com.mojang.brigadier.suggestion.SuggestionProvider;
+import com.mojang.brigadier.tree.ArgumentCommandNode;
+import com.mojang.brigadier.tree.CommandNode;
+import com.mojang.brigadier.tree.LiteralCommandNode;
+import com.mojang.brigadier.tree.RootCommandNode;
+import io.papermc.paper.command.brigadier.argument.WrappedArgumentCommandNode;
+import io.papermc.paper.command.brigadier.argument.WrapperArgumentType;
+import net.minecraft.commands.synchronization.ArgumentTypeInfos;
+import net.minecraft.server.MinecraftServer;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.Map;
+import java.util.WeakHashMap;
+
+@SuppressWarnings({"unchecked", "rawtypes"})
+public class ApiForwardingRootNode extends RootCommandNode<CommandSourceStack> {
+
+    private final CommandDispatcher<net.minecraft.commands.CommandSourceStack> nmsSourceStack = MinecraftServer.getServer().vanillaCommandDispatcher.getDispatcher();
+    private final List<CommandNode<CommandSourceStack>> apiChildren = new ArrayList<>();
+
+    /*
+    Node equality depends on the argument node's type identity, so as a result cache the first result and use that.
+     */
+    private final Map<CommandNode<CommandSourceStack>, CommandNode<CommandSourceStack>> cachedUnwrappedArguments = new WeakHashMap<>();
+
+    /*
+    Strategy:
+    Move all BrigadierWrapperArgument types into a ConvertingArgumentCommandNode
+     */
+    private CommandNode<CommandSourceStack> unwrapWrappedArguments(CommandNode<CommandSourceStack> nms) {
+        if (this.cachedUnwrappedArguments.containsKey(nms)) {
+            return this.cachedUnwrappedArguments.get(nms);
+        }
+
+        CommandNode<CommandSourceStack> rebuiltNode;
+        if (nms instanceof LiteralCommandNode<CommandSourceStack> original) {
+            rebuiltNode = this.recreateLiteral(original);
+        } else if (nms instanceof ArgumentCommandNode original) {
+            ArgumentType<?> unwrappedArgType = original.getType();
+            // Is this argument wrapped?
+            if (unwrappedArgType instanceof WrapperArgumentType<?, ?> wrappedNmsBrigArg) {
+                if (!ArgumentTypeInfos.isClassRecognized(wrappedNmsBrigArg.getWrapped().getClass())) {
+                    throw new IllegalArgumentException("Custom argument type was passed, this was not a recognized type to send to the client! You must only pass vanilla arguments or primitive brig args in the wrapper!");
+                }
+                // Wrap the node in a wrapped argument node
+                rebuiltNode = this.createWrappedArgument(original, wrappedNmsBrigArg);
+            } else if (ArgumentTypeInfos.isClassRecognized(unwrappedArgType.getClass())) {
+                if (
+
+                    unwrappedArgType instanceof BoolArgumentType ||
+                        unwrappedArgType instanceof DoubleArgumentType ||
+                        unwrappedArgType instanceof FloatArgumentType ||
+                        unwrappedArgType instanceof IntegerArgumentType ||
+                        unwrappedArgType instanceof LongArgumentType ||
+                        unwrappedArgType instanceof StringArgumentType
+                ) {
+                    // Is this argument whitelisted?
+                    rebuiltNode = original;
+                } else {
+                    // Is this argument an NMS argument?
+                    throw new IllegalArgumentException("NMS argument type was passed (%s), should be wrapped inside an WrapperArgumentType. Don't add NMS args here!".formatted(unwrappedArgType));
+                }
+            } else {
+                throw new IllegalArgumentException("Custom unknown argument type was passed, should be wrapped inside an WrapperArgumentType.");
+            }
+        } else {
+            throw new IllegalArgumentException("Unknown command node passed.");
+        }
+
+        for (CommandNode<CommandSourceStack> child : nms.getChildren()) {
+            rebuiltNode.addChild(this.unwrapWrappedArguments(child));
+        }
+        this.cachedUnwrappedArguments.put(nms, rebuiltNode);
+
+        return rebuiltNode;
+    }
+
+    private CommandNode<CommandSourceStack> createWrappedArgument(ArgumentCommandNode node, WrapperArgumentType wrapperArgumentType) {
+        CommandNode redirectNode = node.getRedirect() == null ? null : this.unwrapWrappedArguments(node.getRedirect());
+        SuggestionProvider suggestionProvider;
+        // If there is already a custom suggestion provider, ignore.
+        if (node.getCustomSuggestions() != null) {
+            suggestionProvider = node.getCustomSuggestions();
+        } else {
+            // If however we want to handle suggestions ourselves, reference the wrapper.
+            suggestionProvider = wrapperArgumentType.handleSuggestions() ? wrapperArgumentType::listSuggestions : null;
+        }
+
+        return new WrappedArgumentCommandNode<>(node.getName(), wrapperArgumentType, wrapperArgumentType.getWrapped(), node.getCommand(), node.getRequirement(), redirectNode, node.getRedirectModifier(), node.isFork(), suggestionProvider);
+    }
+
+    private CommandNode<CommandSourceStack> recreateLiteral(LiteralCommandNode<CommandSourceStack> node) {
+        CommandNode redirectNode = node.getRedirect() == null ? null : this.unwrapWrappedArguments(node.getRedirect());
+
+        return new LiteralCommandNode<>(node.getLiteral(), node.getCommand(), node.getRequirement(), redirectNode, node.getRedirectModifier(), node.isFork());
+    }
+
+    @Override
+    public void addChild(CommandNode<CommandSourceStack> node) {
+        this.apiChildren.add(node);
+        CommandNode convertedNode = this.unwrapWrappedArguments(node);
+        this.nmsSourceStack.getRoot().addChild(convertedNode);
+    }
+
+    @Override
+    public Collection<CommandNode<CommandSourceStack>> getChildren() {
+        return this.apiChildren;
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/MessageComponentSerializerImpl.java b/src/main/java/io/papermc/paper/command/brigadier/MessageComponentSerializerImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..48e55b763b0c92ada24e624b2fe0eb50d187229d
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/MessageComponentSerializerImpl.java
@@ -0,0 +1,20 @@
+package io.papermc.paper.command.brigadier;
+
+import com.mojang.brigadier.Message;
+import io.papermc.paper.adventure.PaperAdventure;
+import net.kyori.adventure.text.Component;
+import net.minecraft.network.chat.ComponentUtils;
+import org.jetbrains.annotations.NotNull;
+
+public class MessageComponentSerializerImpl implements MessageComponentSerializer {
+
+    @Override
+    public @NotNull Component deserialize(@NotNull Message input) {
+        return PaperAdventure.asAdventure(ComponentUtils.fromMessage(input));
+    }
+
+    @Override
+    public @NotNull Message serialize(@NotNull Component component) {
+        return PaperAdventure.asVanilla(component);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/MirroredCommandDispatcher.java b/src/main/java/io/papermc/paper/command/brigadier/MirroredCommandDispatcher.java
new file mode 100644
index 0000000000000000000000000000000000000000..b40783d0c3dcd52d53a7bc8a56eca94e708b7601
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/MirroredCommandDispatcher.java
@@ -0,0 +1,13 @@
+package io.papermc.paper.command.brigadier;
+
+import com.mojang.brigadier.CommandDispatcher;
+
+public class MirroredCommandDispatcher extends CommandDispatcher<CommandSourceStack> {
+
+    public static final CommandDispatcher<CommandSourceStack> INSTANCE = new MirroredCommandDispatcher();
+
+    public MirroredCommandDispatcher() {
+        super(new ApiForwardingRootNode());
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/PaperBrigadier.java b/src/main/java/io/papermc/paper/command/brigadier/PaperBrigadier.java
new file mode 100644
index 0000000000000000000000000000000000000000..7a1d5677e45aa3f8f7f91a3983c607ed83261094
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/PaperBrigadier.java
@@ -0,0 +1,28 @@
+package io.papermc.paper.command.brigadier;
+
+import com.mojang.brigadier.tree.CommandNode;
+import com.mojang.brigadier.tree.LiteralCommandNode;
+import net.minecraft.commands.Commands;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.command.Command;
+import org.bukkit.craftbukkit.command.VanillaCommandWrapper;
+
+import java.util.List;
+
+public class PaperBrigadier {
+
+    @SuppressWarnings({"unchecked", "rawtypes"})
+    public static Command wrapNode(CommandNode node) {
+        Commands commands = MinecraftServer.getServer().vanillaCommandDispatcher;
+
+        if (node instanceof LiteralCommandNode) {
+            if (node instanceof PluginCommandNode pluginCommandNode) {
+                return new PluginVanillaCommandWrapper(pluginCommandNode.getName(), pluginCommandNode.getDescription(), pluginCommandNode.getUsageText(), List.of(), commands, node, pluginCommandNode.getPlugin());
+            } else {
+                return new VanillaCommandWrapper(commands, node);
+            }
+        } else {
+            throw new IllegalArgumentException("Unsure how to wrap a " + node);
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/PaperCommandSourceStack.java b/src/main/java/io/papermc/paper/command/brigadier/PaperCommandSourceStack.java
new file mode 100644
index 0000000000000000000000000000000000000000..6a4eaf1ac9fea3abf5b422afc4fe06a3b33e2472
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/PaperCommandSourceStack.java
@@ -0,0 +1,34 @@
+package io.papermc.paper.command.brigadier;
+
+import com.destroystokyo.paper.brigadier.BukkitBrigadierCommandSource;
+import net.minecraft.world.phys.Vec2;
+import net.minecraft.world.phys.Vec3;
+import org.bukkit.command.CommandSender;
+
+public interface PaperCommandSourceStack extends CommandSourceStack, BukkitBrigadierCommandSource {
+
+    net.minecraft.commands.CommandSourceStack getHandle();
+
+    @Override
+    default org.bukkit.entity.Entity getBukkitEntity() {
+        return this.getHandle().getEntity() != null ? this.getHandle().getEntity().getBukkitEntity() : null;
+    }
+
+    @Override
+    default org.bukkit.World getBukkitWorld() {
+        return this.getHandle().getLevel() != null ? this.getHandle().getLevel().getWorld() : null;
+    }
+
+    @Override
+    default org.bukkit.Location getBukkitLocation() {
+        Vec3 pos = this.getHandle().getPosition();
+        org.bukkit.World world = this.getBukkitWorld();
+        Vec2 rot = this.getHandle().getRotation();
+        return world != null && pos != null ? new org.bukkit.Location(world, pos.x, pos.y, pos.z, rot != null ? rot.x : 0, rot != null ? rot.y : 0) : null;
+    }
+
+    @Override
+    default CommandSender getBukkitSender() {
+        return this.getHandle().getBukkitSender();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/PluginVanillaCommandWrapper.java b/src/main/java/io/papermc/paper/command/brigadier/PluginVanillaCommandWrapper.java
new file mode 100644
index 0000000000000000000000000000000000000000..bdb7223453be2ed971941ab57e226133e42b76ec
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/PluginVanillaCommandWrapper.java
@@ -0,0 +1,33 @@
+package io.papermc.paper.command.brigadier;
+
+import com.mojang.brigadier.tree.CommandNode;
+import net.minecraft.commands.CommandSourceStack;
+import net.minecraft.commands.Commands;
+import org.bukkit.command.PluginIdentifiableCommand;
+import org.bukkit.craftbukkit.command.VanillaCommandWrapper;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.List;
+
+// Exists to that /help can show the plugin
+public class PluginVanillaCommandWrapper extends VanillaCommandWrapper implements PluginIdentifiableCommand {
+
+    private final Plugin plugin;
+
+    public PluginVanillaCommandWrapper(String name, String description, String usageMessage, List<String> aliases, Commands dispatcher, CommandNode<CommandSourceStack> vanillaCommand, Plugin plugin) {
+        super(name, description, usageMessage, aliases, dispatcher, vanillaCommand);
+        this.plugin = plugin;
+    }
+
+    @Override
+    public @NotNull Plugin getPlugin() {
+        return this.plugin;
+    }
+
+    // Show in help menu!
+    @Override
+    public boolean isRegistered() {
+        return true;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/argument/MessageArgumentImpl.java b/src/main/java/io/papermc/paper/command/brigadier/argument/MessageArgumentImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..1336b8125d0db3f5b288ce2f91e8ecfac54f6d26
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/argument/MessageArgumentImpl.java
@@ -0,0 +1,8 @@
+package io.papermc.paper.command.brigadier.argument;
+
+public record MessageArgumentImpl(String message) implements SignedMessage {
+    @Override
+    public String getSignedContent() {
+        return this.message;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/argument/VanillaArgumentProviderImpl.java b/src/main/java/io/papermc/paper/command/brigadier/argument/VanillaArgumentProviderImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..9e8dff116cb1e94db36d03cd38282107026dd1d7
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/argument/VanillaArgumentProviderImpl.java
@@ -0,0 +1,62 @@
+package io.papermc.paper.command.brigadier.argument;
+
+import com.mojang.brigadier.arguments.ArgumentType;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import net.minecraft.commands.CommandBuildContext;
+import net.minecraft.commands.arguments.MessageArgument;
+import net.minecraft.commands.arguments.UuidArgument;
+import net.minecraft.commands.arguments.blocks.BlockStateArgument;
+import net.minecraft.commands.arguments.item.ItemArgument;
+import net.minecraft.core.RegistryAccess;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.block.CraftBlockStates;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.inventory.ItemStack;
+
+import java.util.UUID;
+
+public class VanillaArgumentProviderImpl implements VanillaArgumentProvider {
+
+    private final CommandBuildContext commandbuildcontext = new CommandBuildContext(RegistryAccess.BUILTIN.get());
+
+    @Override
+    public ArgumentType<ItemStack> itemStack() {
+        return this.of(ItemArgument.item(this.commandbuildcontext), (result) -> {
+            return CraftItemStack.asBukkitCopy(result.createItemStack(1, true));
+        });
+    }
+
+    @Override
+    public ArgumentType<BlockState> blockState() {
+        return this.of(BlockStateArgument.block(this.commandbuildcontext), (result) -> {
+            return CraftBlockStates.getBlockState(result.getState(), result.tag);
+        });
+    }
+
+    @Override
+    public ArgumentType<SignedMessage> signedMessage() {
+        return this.of(MessageArgument.message(), (result) -> {
+            return new MessageArgumentImpl(result.getText());
+        });
+    }
+
+    @Override
+    public ArgumentType<UUID> uuid() {
+        return this.of(UuidArgument.uuid(), (identity) -> identity);
+    }
+
+    private <B, C> ArgumentType<C> of(ArgumentType<B> base, ResultConverter<B, C> converter) {
+        return new WrapperArgumentType<>(base) {
+            @Override
+            public C convert(B baseType) throws CommandSyntaxException {
+                return converter.convert(baseType);
+            }
+        };
+    }
+
+    @FunctionalInterface
+    interface ResultConverter<T, R> {
+
+        R convert(T type) throws CommandSyntaxException;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/argument/WrappedArgumentCommandNode.java b/src/main/java/io/papermc/paper/command/brigadier/argument/WrappedArgumentCommandNode.java
new file mode 100644
index 0000000000000000000000000000000000000000..7a838bab16b33025b9a2eae8325f353ad9689e1b
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/argument/WrappedArgumentCommandNode.java
@@ -0,0 +1,45 @@
+package io.papermc.paper.command.brigadier.argument;
+
+import com.mojang.brigadier.Command;
+import com.mojang.brigadier.RedirectModifier;
+import com.mojang.brigadier.StringReader;
+import com.mojang.brigadier.arguments.ArgumentType;
+import com.mojang.brigadier.context.CommandContextBuilder;
+import com.mojang.brigadier.context.ParsedArgument;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import com.mojang.brigadier.suggestion.SuggestionProvider;
+import com.mojang.brigadier.tree.ArgumentCommandNode;
+import com.mojang.brigadier.tree.CommandNode;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import net.minecraft.commands.synchronization.ArgumentTypeInfos;
+
+import java.util.function.Predicate;
+
+/*
+Basically this converts the argument to a different type when parsing.
+ */
+public class WrappedArgumentCommandNode<NMS, API> extends ArgumentCommandNode<CommandSourceStack, NMS> {
+
+    private final ArgumentType<API> argument;
+
+    public WrappedArgumentCommandNode(String name, ArgumentType<API> argument, ArgumentType<NMS> nms, Command<CommandSourceStack> command, Predicate<CommandSourceStack> requirement, CommandNode<CommandSourceStack> redirect, RedirectModifier<CommandSourceStack> modifier, boolean forks, SuggestionProvider<CommandSourceStack> customSuggestions) {
+        super(name, nms, command, requirement, redirect, modifier, forks, customSuggestions);
+        if (!ArgumentTypeInfos.isClassRecognized(nms.getClass())) {
+            // Is this argument an NMS argument?
+            throw new IllegalArgumentException("Unexpected argument type was passed. This should be an NMS type!");
+        }
+
+        this.argument = argument;
+    }
+
+    // See ArgumentCommandNode#parse
+    @Override
+    public void parse(StringReader reader, CommandContextBuilder<CommandSourceStack> contextBuilder) throws CommandSyntaxException {
+        final int start = reader.getCursor();
+        API result = this.argument.parse(reader); // Use the api argument parser
+        final ParsedArgument<CommandSourceStack, API> parsed = new ParsedArgument<>(start, reader.getCursor(), result); // Return an API parsed argument instead.
+
+        contextBuilder.withArgument(this.getName(), parsed);
+        contextBuilder.withNode(this, parsed.getRange());
+    }
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/bukkit/BukkitBrigForwardingMap.java b/src/main/java/io/papermc/paper/command/brigadier/bukkit/BukkitBrigForwardingMap.java
new file mode 100644
index 0000000000000000000000000000000000000000..c8889e5ae6d7283eb80f40cd59b7e3d682ade0f5
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/bukkit/BukkitBrigForwardingMap.java
@@ -0,0 +1,194 @@
+package io.papermc.paper.command.brigadier.bukkit;
+
+import com.mojang.brigadier.CommandDispatcher;
+import com.mojang.brigadier.tree.CommandNode;
+import com.mojang.brigadier.tree.LiteralCommandNode;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import io.papermc.paper.command.brigadier.bukkit.BukkitCommandNode;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+public class BukkitBrigForwardingMap implements Map<String, Command> {
+
+    private final CommandDispatcher<CommandSourceStack> dispatcher = Bukkit.getServer().getCommandDispatcher();
+
+    @Override
+    public int size() {
+        return this.dispatcher.getRoot().getChildren().size();
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return this.size() != 0;
+    }
+
+    @Override
+    public boolean containsKey(Object key) {
+        if (key == null) {
+            return false;
+        }
+
+        // Do any children match?
+        for (CommandNode<CommandSourceStack> child : this.dispatcher.getRoot().getChildren()) {
+            if (child instanceof LiteralCommandNode<CommandSourceStack> literalCommandNode && literalCommandNode.getLiteral().equals(key)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    @Override
+    public boolean containsValue(Object value) {
+        if (value == null) {
+            return false;
+        }
+
+        for (CommandNode<CommandSourceStack> child : this.dispatcher.getRoot().getChildren()) {
+            // If child is a bukkit command node, we can convert it!
+            if (child instanceof BukkitCommandNode bukkitCommandNode) {
+                return bukkitCommandNode.equals(value);
+            }
+        }
+
+        return false;
+    }
+
+    @Override
+    public Command get(Object key) {
+        for (CommandNode<CommandSourceStack> child : this.dispatcher.getRoot().getChildren()) {
+            if (child instanceof LiteralCommandNode<CommandSourceStack> literalCommandNode && literalCommandNode.getLiteral().equals(key)) {
+                if (literalCommandNode instanceof BukkitCommandNode bukkitCommandNode) {
+                    return bukkitCommandNode.getBukkitCommand();
+                }
+
+                return Bukkit.getUnsafe().wrapBrigNode(child);
+            }
+        }
+
+        return null;
+    }
+
+    @Nullable
+    @Override
+    public Command put(String key, Command value) {
+        this.dispatcher.getRoot().addChild(BukkitCommandNode.of(key, value));
+        return null;
+    }
+
+    @Override
+    public Command remove(Object key) {
+        Command old = this.get(key);
+        if (old != null) {
+            this.dispatcher.getRoot().removeCommand((String) key);
+        }
+        new NullPointerException().printStackTrace();
+
+        return old;
+    }
+
+    @Override
+    public void putAll(@NotNull Map<? extends String, ? extends Command> m) {
+        for (Entry<? extends String, ? extends Command> entry : m.entrySet()) {
+            this.put(entry.getKey(), entry.getValue());
+        }
+    }
+
+    @Override
+    public void clear() {
+        this.dispatcher.getRoot().clearAll();
+    }
+
+    // TODO: Mutability?
+
+    @NotNull
+    @Override
+    public Set<String> keySet() {
+        Set<String> keys = new HashSet<>();
+        for (CommandNode<CommandSourceStack> child : this.dispatcher.getRoot().getChildren()) {
+            if (child instanceof LiteralCommandNode<CommandSourceStack> literalCommandNode) {
+                keys.add(literalCommandNode.getLiteral());
+            }
+        }
+
+        return keys;
+    }
+
+    @NotNull
+    @Override
+    public Collection<Command> values() {
+        List<Command> commands = new ArrayList<>();
+
+        for (CommandNode<CommandSourceStack> child : this.dispatcher.getRoot().getChildren()) {
+            if (child instanceof LiteralCommandNode<CommandSourceStack> literalCommandNode) {
+                if (literalCommandNode instanceof BukkitCommandNode bukkitCommandNode) {
+                    commands.add(bukkitCommandNode.getBukkitCommand());
+                } else {
+                    commands.add(Bukkit.getUnsafe().wrapBrigNode(child));
+                }
+            }
+        }
+
+        return commands;
+    }
+
+
+    @NotNull
+    @Override
+    public Set<Entry<String, Command>> entrySet() {
+        Set<Entry<String, Command>> commands = new HashSet<>();
+
+        for (CommandNode<CommandSourceStack> child : this.dispatcher.getRoot().getChildren()) {
+            if (child instanceof LiteralCommandNode<CommandSourceStack> literalCommandNode) {
+                if (literalCommandNode instanceof BukkitCommandNode bukkitCommandNode) {
+                    commands.add(new Entry<>() {
+                        @Override
+                        public String getKey() {
+                            return bukkitCommandNode.getName();
+                        }
+
+                        @Override
+                        public Command getValue() {
+                            return bukkitCommandNode.getBukkitCommand();
+                        }
+
+                        @Override
+                        public Command setValue(Command value) {
+                            return bukkitCommandNode.getBukkitCommand();
+                        }
+                    });
+                } else {
+                    Command wrapped = Bukkit.getUnsafe().wrapBrigNode(child);
+                    commands.add(new Entry<>() {
+                        @Override
+                        public String getKey() {
+                            return child.getName();
+                        }
+
+                        @Override
+                        public Command getValue() {
+                            return wrapped;
+                        }
+
+                        @Override
+                        public Command setValue(Command value) {
+                            return wrapped;
+                        }
+                    });
+                }
+            }
+        }
+
+        return commands;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/bukkit/BukkitCommandNode.java b/src/main/java/io/papermc/paper/command/brigadier/bukkit/BukkitCommandNode.java
new file mode 100644
index 0000000000000000000000000000000000000000..5d12c78f0f5e6f3cc49dc87ef814927e4af66be1
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/bukkit/BukkitCommandNode.java
@@ -0,0 +1,126 @@
+package io.papermc.paper.command.brigadier.bukkit;
+
+import co.aikar.timings.Timing;
+import com.mojang.brigadier.arguments.StringArgumentType;
+import com.mojang.brigadier.builder.RequiredArgumentBuilder;
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import com.mojang.brigadier.suggestion.SuggestionProvider;
+import com.mojang.brigadier.suggestion.Suggestions;
+import com.mojang.brigadier.suggestion.SuggestionsBuilder;
+import com.mojang.brigadier.tree.LiteralCommandNode;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandException;
+import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.ApiStatus;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.concurrent.CompletableFuture;
+import java.util.logging.Level;
+
+public class BukkitCommandNode extends LiteralCommandNode<CommandSourceStack> {
+
+    private final Command command;
+
+    private BukkitCommandNode(String literal, Command command, BukkitBrigCommand bukkitBrigCommand) {
+        super(
+            literal, bukkitBrigCommand, s -> command.testPermissionSilent(s.getBukkitSender()),
+            null, null, false
+        );
+        this.command = command;
+    }
+
+    public static BukkitCommandNode of(String name, Command command) {
+        BukkitBrigCommand bukkitBrigCommand = new BukkitBrigCommand(command, name);
+        BukkitCommandNode commandNode = new BukkitCommandNode(name, command, bukkitBrigCommand);
+        commandNode.addChild(
+            RequiredArgumentBuilder.<CommandSourceStack, String>argument("args", StringArgumentType.greedyString()).suggests(BukkitBrigSuggestionProvider.INSTANCE).executes(bukkitBrigCommand).build()
+        );
+
+        return commandNode;
+    }
+
+    public Command getBukkitCommand() {
+        return this.command;
+    }
+
+    static class BukkitBrigCommand implements com.mojang.brigadier.Command<CommandSourceStack> {
+
+        private final org.bukkit.command.Command command;
+        private final String literal;
+
+        BukkitBrigCommand(org.bukkit.command.Command command, String literal) {
+            this.command = command;
+            this.literal = literal;
+        }
+
+        @Override
+        public int run(CommandContext<CommandSourceStack> context) throws CommandSyntaxException {
+            CommandSender sender = context.getSource().getBukkitSender();
+
+            // Plugins do weird things to workaround normal registration
+            if (this.command.timings == null) {
+                this.command.timings = co.aikar.timings.TimingsManager.getCommandTiming(null, this.command);
+            }
+
+            String[] args = org.apache.commons.lang3.StringUtils.split(context.getInput(), ' '); // fix adjacent spaces (from console/plugins) causing empty array elements
+
+            try (Timing ignored = this.command.timings.startTiming()) {
+                // Note: we don't return the result of target.execute as thats success / failure, we return handled (true) or not handled (false)
+                this.command.execute(sender, this.literal, Arrays.copyOfRange(args, 1, args.length));
+            }
+
+            // return true as command was handled
+            return 1;
+        }
+    }
+
+    static class BukkitBrigSuggestionProvider implements SuggestionProvider<CommandSourceStack> {
+
+        public static final SuggestionProvider<CommandSourceStack> INSTANCE = new BukkitBrigSuggestionProvider();
+
+        @Override
+        public CompletableFuture<Suggestions> getSuggestions(CommandContext<CommandSourceStack> context, SuggestionsBuilder builder) throws CommandSyntaxException {
+            // Paper start
+            org.bukkit.command.CommandSender sender = context.getSource().getBukkitSender();
+            if (!(sender instanceof org.bukkit.entity.Player player)) {
+                return CompletableFuture.completedFuture(builder.build());
+            }
+
+            String message = builder.getInput();
+            List<String> results = null;
+            Location pos = context.getSource().getBukkitLocation();
+            try {
+                if (message.startsWith("/")) {
+                    // Trim leading '/' if present (won't always be present in command blocks)
+                    message = message.substring(1);
+                }
+                if (pos == null) {
+                    results = Bukkit.getCommandMap().tabComplete(player, message);
+                } else {
+                    results = Bukkit.getCommandMap().tabComplete(player, message, pos.clone());
+                }
+            } catch (CommandException ex) {
+                player.sendMessage(ChatColor.RED + "An internal error occurred while attempting to tab-complete this command");
+                Bukkit.getServer().getLogger().log(Level.SEVERE, "Exception when " + player.getName() + " attempted to tab complete " + message, ex);
+            }
+
+            // Paper end
+
+            // Defaults to sub nodes, but we have just one giant args node, so offset accordingly
+            builder = builder.createOffset(builder.getInput().lastIndexOf(' ') + 1);
+
+            for (String s : results) {
+                builder.suggest(s);
+            }
+
+            return builder.buildFuture();
+        }
+    }
+
+}
diff --git a/src/main/java/net/minecraft/commands/CommandSourceStack.java b/src/main/java/net/minecraft/commands/CommandSourceStack.java
index e0dd0fc1638377f4d4226d4b2976b901d635dff0..79884a7f8cd54a0a8a1464891a5cc2dbef790626 100644
--- a/src/main/java/net/minecraft/commands/CommandSourceStack.java
+++ b/src/main/java/net/minecraft/commands/CommandSourceStack.java
@@ -39,7 +39,7 @@ import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
 import com.mojang.brigadier.tree.CommandNode; // CraftBukkit
 
-public class CommandSourceStack implements SharedSuggestionProvider, com.destroystokyo.paper.brigadier.BukkitBrigadierCommandSource { // Paper
+public class CommandSourceStack implements SharedSuggestionProvider, io.papermc.paper.command.brigadier.PaperCommandSourceStack {
 
     public static final SimpleCommandExceptionType ERROR_NOT_PLAYER = new SimpleCommandExceptionType(Component.translatable("permissions.requires.player"));
     public static final SimpleCommandExceptionType ERROR_NOT_ENTITY = new SimpleCommandExceptionType(Component.translatable("permissions.requires.entity"));
@@ -172,26 +172,6 @@ public class CommandSourceStack implements SharedSuggestionProvider, com.destroy
         return this.entity != null ? this.entity.asChatSender() : ChatSender.SYSTEM;
     }
 
-    // Paper start
-    @Override
-    public org.bukkit.entity.Entity getBukkitEntity() {
-        return getEntity() != null ? getEntity().getBukkitEntity() : null;
-    }
-
-    @Override
-    public org.bukkit.World getBukkitWorld() {
-        return getLevel() != null ? getLevel().getWorld() : null;
-    }
-
-    @Override
-    public org.bukkit.Location getBukkitLocation() {
-        Vec3 pos = getPosition();
-        org.bukkit.World world = getBukkitWorld();
-        Vec2 rot = getRotation();
-        return world != null && pos != null ? new org.bukkit.Location(world, pos.x, pos.y, pos.z, rot != null ? rot.x : 0, rot != null ? rot.y : 0) : null;
-    }
-    // Paper end
-
     @Override
     public boolean hasPermission(int level) {
         // CraftBukkit start
@@ -407,6 +387,12 @@ public class CommandSourceStack implements SharedSuggestionProvider, com.destroy
         return this.server.registryAccess();
     }
 
+    // Paper start
+    @Override
+    public CommandSourceStack getHandle() {
+        return this;
+    }
+    // Paper end
     // CraftBukkit start
     public org.bukkit.command.CommandSender getBukkitSender() {
         return this.source.getBukkitSender(this);
diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index a0f5aa8c3cfce63af9cb286278a7fdebd7aa3642..1a34141032a0ae601d512483d71eea0b3e3a57b9 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -151,7 +151,7 @@ public class Commands {
         GameModeCommand.register(this.dispatcher);
         GameRuleCommand.register(this.dispatcher);
         GiveCommand.register(this.dispatcher, commandRegistryAccess);
-        HelpCommand.register(this.dispatcher);
+        //HelpCommand.register(this.dispatcher); Paper - Use bukkit /help command
         ItemCommands.register(this.dispatcher, commandRegistryAccess);
         KickCommand.register(this.dispatcher);
         KillCommand.register(this.dispatcher);
@@ -291,6 +291,11 @@ public class Commands {
     }
 
     public int performCommand(ParseResults<CommandSourceStack> parseresults, String s, String label) { // CraftBukkit
+    // Paper start
+        return this.performCommand(parseresults, s, label, false);
+    }
+    public int performCommand(ParseResults<CommandSourceStack> parseresults, String s, String label, boolean throwCommandError) {
+    // Paper end
         CommandSourceStack commandlistenerwrapper = (CommandSourceStack) parseresults.getContext().getSource();
 
         commandlistenerwrapper.getServer().getProfiler().push(() -> {
@@ -336,6 +341,7 @@ public class Commands {
                 b1 = 0;
                 return b1;
             } catch (Exception exception) {
+                if (throwCommandError) throw exception;
                 MutableComponent ichatmutablecomponent2 = Component.literal(exception.getMessage() == null ? exception.getClass().getName() : exception.getMessage());
 
                 if (Commands.LOGGER.isDebugEnabled()) {
diff --git a/src/main/java/net/minecraft/commands/arguments/blocks/BlockInput.java b/src/main/java/net/minecraft/commands/arguments/blocks/BlockInput.java
index 9c34abab53cf4229f84b45ac8606e930c70c0e18..5eadc7ac773cdb743c52ebcd8af6a3ce3025d288 100644
--- a/src/main/java/net/minecraft/commands/arguments/blocks/BlockInput.java
+++ b/src/main/java/net/minecraft/commands/arguments/blocks/BlockInput.java
@@ -17,7 +17,7 @@ public class BlockInput implements Predicate<BlockInWorld> {
     private final BlockState state;
     private final Set<Property<?>> properties;
     @Nullable
-    private final CompoundTag tag;
+    public final CompoundTag tag; // Paper
 
     public BlockInput(BlockState state, Set<Property<?>> properties, @Nullable CompoundTag data) {
         this.state = state;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index bfde5bbcccfaa754ec6bdf4f3817981a93e465bd..1e8de9cb93e3c3666a16d988cfe5eb625d0f0361 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -26,6 +26,7 @@ import java.io.InputStreamReader;
 import java.nio.ByteBuffer;
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Base64;
 import java.util.Collections;
 import java.util.HashMap;
@@ -252,10 +253,10 @@ public final class CraftServer implements Server {
     private final Logger logger = Logger.getLogger("Minecraft");
     private final ServicesManager servicesManager = new SimpleServicesManager();
     private final CraftScheduler scheduler = new CraftScheduler();
-    private final CraftCommandMap commandMap = new CraftCommandMap(this);
+    private final CraftCommandMap commandMap; // Paper - Move down
     private final SimpleHelpMap helpMap = new SimpleHelpMap(this);
     private final StandardMessenger messenger = new StandardMessenger();
-    private final SimplePluginManager pluginManager = new SimplePluginManager(this, this.commandMap);
+    private final SimplePluginManager pluginManager; // Paper - Move down
     private final StructureManager structureManager;
     protected final DedicatedServer console;
     protected final DedicatedPlayerList playerList;
@@ -305,6 +306,10 @@ public final class CraftServer implements Server {
         this.structureManager = new CraftStructureManager(console.getStructureManager());
 
         Bukkit.setServer(this);
+        // Paper start
+        this.commandMap = new CraftCommandMap(this);
+        this.pluginManager = new SimplePluginManager(this, this.commandMap);
+         // Paper end
 
         // Register all the Enchantments and PotionTypes now so we can stop new registration immediately after
         Enchantments.SHARPNESS.getClass();
@@ -501,45 +506,11 @@ public final class CraftServer implements Server {
         Commands dispatcher = console.vanillaCommandDispatcher;
 
         // Build a list of all Vanilla commands and create wrappers
-        for (CommandNode<CommandSourceStack> cmd : dispatcher.getDispatcher().getRoot().getChildren()) {
-            // Spigot start
-            VanillaCommandWrapper wrapper = new VanillaCommandWrapper(dispatcher, cmd);
-            if (org.spigotmc.SpigotConfig.replaceCommands.contains( wrapper.getName() ) ) {
-                if (first) {
-                    this.commandMap.register("minecraft", wrapper);
-                }
-            } else if (!first) {
-                this.commandMap.register("minecraft", wrapper);
-            }
-            // Spigot end
-        }
+        // Paper - Replace implementation
     }
 
     public void syncCommands() {
-        // Clear existing commands
-        Commands dispatcher = console.resources.managers().commands = new Commands();
-
-        // Register all commands, vanilla ones will be using the old dispatcher references
-        for (Map.Entry<String, Command> entry : this.commandMap.getKnownCommands().entrySet()) {
-            String label = entry.getKey();
-            Command command = entry.getValue();
-
-            if (command instanceof VanillaCommandWrapper) {
-                LiteralCommandNode<CommandSourceStack> node = (LiteralCommandNode<CommandSourceStack>) ((VanillaCommandWrapper) command).vanillaCommand;
-                if (!node.getLiteral().equals(label)) {
-                    LiteralCommandNode<CommandSourceStack> clone = new LiteralCommandNode(label, node.getCommand(), node.getRequirement(), node.getRedirect(), node.getRedirectModifier(), node.isFork());
-
-                    for (CommandNode<CommandSourceStack> child : node.getChildren()) {
-                        clone.addChild(child);
-                    }
-                    node = clone;
-                }
-
-                dispatcher.getDispatcher().getRoot().addChild(node);
-            } else {
-                new BukkitCommandWrapper(this, entry.getValue()).register(dispatcher.getDispatcher(), label);
-            }
-        }
+        Commands dispatcher = this.getHandle().getServer().vanillaCommandDispatcher; // Paper - We now register directly to the dispatcher.
 
         // Refresh commands
         for (ServerPlayer player : this.getHandle().players) {
@@ -905,22 +876,31 @@ public final class CraftServer implements Server {
                 throw new RuntimeException("Exception processing dispatch command", e.getCause());
             }
         }
-        // Paper End
-        if (this.commandMap.dispatch(sender, commandLine)) {
-            return true;
-        }
+        return this.dispatchCommand(org.bukkit.craftbukkit.command.VanillaCommandWrapper.getListener(sender), commandLine);
+    }
 
-        // Spigot start
-        if (!org.spigotmc.SpigotConfig.unknownCommandMessage.isEmpty()) {
-            // Paper start
-            org.bukkit.event.command.UnknownCommandEvent event = new org.bukkit.event.command.UnknownCommandEvent(sender, commandLine, org.spigotmc.SpigotConfig.unknownCommandMessage);
-            Bukkit.getServer().getPluginManager().callEvent(event);
-            if (event.message() != null) {
-                sender.sendMessage(event.message());
-            }
-            // Paper end
+    public boolean dispatchCommand(CommandSourceStack sourceStack, String commandLine) {
+        net.minecraft.commands.Commands commands = this.getHandle().getServer().vanillaCommandDispatcher;
+        com.mojang.brigadier.CommandDispatcher<CommandSourceStack> dispatcher = commands.getDispatcher();
+        com.mojang.brigadier.ParseResults<CommandSourceStack> results = dispatcher.parse(commandLine, sourceStack);
+
+        Command target = null; // TODO
+        CommandSender sender = sourceStack.getBukkitSender();
+        String[] args = org.apache.commons.lang3.StringUtils.split(commandLine, ' '); // Paper - fix adjacent spaces (from console/plugins) causing empty array elements
+
+        try {
+            commands.performCommand(results, commandLine, commandLine, true);
+        } catch (CommandException ex) {
+            this.pluginManager.callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerCommandException(ex, target, sender, args))); // Paper
+            //target.timings.stopTiming(); // Spigot // Paper
+            throw ex;
+        } catch (Throwable ex) {
+            //target.timings.stopTiming(); // Spigot // Paper
+            String msg = "Unhandled exception executing '" + commandLine + "' in " + target;
+            this.pluginManager.callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerCommandException(ex, target, sender, args))); // Paper
+            throw new CommandException(msg, ex);
         }
-        // Spigot end
+        // Paper end
 
         return false;
     }
@@ -2898,5 +2878,10 @@ public final class CraftServer implements Server {
         return this.potionBrewer;
     }
 
+    @Override
+    public com.mojang.brigadier.CommandDispatcher<io.papermc.paper.command.brigadier.CommandSourceStack> getCommandDispatcher() {
+        return io.papermc.paper.command.brigadier.MirroredCommandDispatcher.INSTANCE;
+    }
+
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/command/BukkitCommandWrapper.java b/src/main/java/org/bukkit/craftbukkit/command/BukkitCommandWrapper.java
index 2476727cd60034c4df2db36b9ed808e72d7b686f..13982e650d8d0f3edc8f99cd84be64aa634a51b7 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/BukkitCommandWrapper.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/BukkitCommandWrapper.java
@@ -20,10 +20,11 @@ import org.bukkit.command.CommandException;
 import org.bukkit.command.CommandSender;
 import org.bukkit.craftbukkit.CraftServer;
 
-public class BukkitCommandWrapper implements com.mojang.brigadier.Command<CommandSourceStack>, Predicate<CommandSourceStack>, SuggestionProvider<CommandSourceStack>, com.destroystokyo.paper.brigadier.BukkitBrigadierCommand<CommandSourceStack> { // Paper
+@Deprecated(forRemoval = true) // Don't use
+public class BukkitCommandWrapper implements com.mojang.brigadier.Command<CommandSourceStack>, Predicate<CommandSourceStack>, SuggestionProvider<CommandSourceStack> {
 
     private final CraftServer server;
-    private final Command command;
+    public final Command command; // Paper
 
     public BukkitCommandWrapper(CraftServer server, Command command) {
         this.server = server;
@@ -31,19 +32,10 @@ public class BukkitCommandWrapper implements com.mojang.brigadier.Command<Comman
     }
 
     public LiteralCommandNode<CommandSourceStack> register(CommandDispatcher<CommandSourceStack> dispatcher, String label) {
-        // Paper start - Expose Brigadier to Paper-MojangAPI
-        com.mojang.brigadier.tree.RootCommandNode<CommandSourceStack> root = dispatcher.getRoot();
-        LiteralCommandNode<CommandSourceStack> literal = LiteralArgumentBuilder.<CommandSourceStack>literal(label).requires(this).executes(this).build();
-        com.mojang.brigadier.tree.ArgumentCommandNode<CommandSourceStack, String> defaultArgs = RequiredArgumentBuilder.<CommandSourceStack, String>argument("args", StringArgumentType.greedyString()).suggests(this).executes(this).build();
-        literal.addChild(defaultArgs);
-        com.destroystokyo.paper.event.brigadier.CommandRegisteredEvent<CommandSourceStack> event = new com.destroystokyo.paper.event.brigadier.CommandRegisteredEvent<>(label, this, this.command, root, literal, defaultArgs);
-        if (!event.callEvent()) {
-            return null;
-        }
-        literal = event.getLiteral();
-        root.addChild(literal);
-        return literal;
-        // Paper end
+        return dispatcher.register(
+            LiteralArgumentBuilder.<CommandSourceStack>literal(label).requires(this).executes(this)
+                .then(RequiredArgumentBuilder.<CommandSourceStack, String>argument("args", StringArgumentType.greedyString()).suggests(this).executes(this))
+        );
     }
 
     @Override
@@ -66,7 +58,13 @@ public class BukkitCommandWrapper implements com.mojang.brigadier.Command<Comman
 
     @Override
     public CompletableFuture<Suggestions> getSuggestions(CommandContext<CommandSourceStack> context, SuggestionsBuilder builder) throws CommandSyntaxException {
-        List<String> results = this.server.tabComplete(context.getSource().getBukkitSender(), builder.getInput(), context.getSource().getLevel(), context.getSource().getPosition(), true);
+        // Paper start
+        org.bukkit.command.CommandSender sender = context.getSource().getBukkitSender();
+        if (!(sender instanceof org.bukkit.entity.Player player)) {
+            return CompletableFuture.completedFuture(builder.build());
+        }
+        List<String> results = this.server.tabCompleteCommand(player, builder.getInput(), context.getSource().getLevel(), context.getSource().getPosition());
+        // Paper end
 
         // Defaults to sub nodes, but we have just one giant args node, so offset accordingly
         builder = builder.createOffset(builder.getInput().lastIndexOf(' ') + 1);
diff --git a/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java b/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
index 6035af2cf08353b3d3801220d8116d8611a0cd37..ecb62216e411e89b21608b141e43301dc11edd0e 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
@@ -25,11 +25,18 @@ import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.entity.Player;
 import org.bukkit.entity.minecart.CommandMinecart;
 
-public final class VanillaCommandWrapper extends BukkitCommand {
+public class VanillaCommandWrapper extends BukkitCommand { // Paper
 
     private final Commands dispatcher;
     public final CommandNode<CommandSourceStack> vanillaCommand;
 
+    // Paper start
+    public VanillaCommandWrapper(String name, String description, String usageMessage, List<String> aliases, Commands dispatcher, CommandNode<CommandSourceStack> vanillaCommand) {
+        super(name, description, usageMessage, aliases);
+        this.dispatcher = dispatcher;
+        this.vanillaCommand = vanillaCommand;
+    }
+    // Paper end
     public VanillaCommandWrapper(Commands dispatcher, CommandNode<CommandSourceStack> vanillaCommand) {
         super(vanillaCommand.getName(), "A Mojang provided command.", vanillaCommand.getUsageText(), Collections.EMPTY_LIST);
         this.dispatcher = dispatcher;
diff --git a/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java b/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
index 40b66adcb5aac64212b1937dc506ebb60f2eed83..44287bc95009dc1b6c70443759895ee28ecc54d9 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
@@ -199,15 +199,18 @@ public class SimpleHelpMap implements HelpMap {
     }
 
     private String getCommandPluginName(Command command) {
+        // Paper start - Move up
+        if (command instanceof PluginIdentifiableCommand) {
+            return ((PluginIdentifiableCommand) command).getPlugin().getName();
+        }
+        // Paper end
         if (command instanceof VanillaCommandWrapper) {
             return "Minecraft";
         }
         if (command instanceof BukkitCommand) {
             return "Bukkit";
         }
-        if (command instanceof PluginIdentifiableCommand) {
-            return ((PluginIdentifiableCommand) command).getPlugin().getName();
-        }
+        // Paper - Move PluginIdentifiableCommand instanceof check to allow brig commands
         return null;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 8961da579b114cbafb329c00aadf1cf75e70cf97..94ea22836660124d44dee50b34b8f49534856ca7 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -604,6 +604,15 @@ public final class CraftMagicNumbers implements UnsafeValues {
         Preconditions.checkArgument(material.isBlock(), material + " is not a block");
         return getBlock(material).hasCollision;
     }
+    @Override
+    public org.bukkit.command.Command wrapBrigNode(com.mojang.brigadier.tree.CommandNode<?> commandNode) {
+        return io.papermc.paper.command.brigadier.PaperBrigadier.wrapNode(commandNode);
+    }
+
+    @Override
+    public java.util.Map<String, org.bukkit.command.Command> getCommandMirrorMap() {
+        return new io.papermc.paper.command.brigadier.bukkit.BukkitBrigForwardingMap();
+    }
     // Paper end
 
     /**
diff --git a/src/main/resources/META-INF/services/io.papermc.paper.command.brigadier.MessageComponentSerializer b/src/main/resources/META-INF/services/io.papermc.paper.command.brigadier.MessageComponentSerializer
new file mode 100644
index 0000000000000000000000000000000000000000..2428b577b9bf0eac6947f5d919cbb51f7aca3d50
--- /dev/null
+++ b/src/main/resources/META-INF/services/io.papermc.paper.command.brigadier.MessageComponentSerializer
@@ -0,0 +1 @@
+io.papermc.paper.command.brigadier.MessageComponentSerializerImpl
diff --git a/src/main/resources/META-INF/services/io.papermc.paper.command.brigadier.argument.VanillaArgumentProvider b/src/main/resources/META-INF/services/io.papermc.paper.command.brigadier.argument.VanillaArgumentProvider
new file mode 100644
index 0000000000000000000000000000000000000000..b2fdb8351c2abb55283850a929d2a87aa6ecb80f
--- /dev/null
+++ b/src/main/resources/META-INF/services/io.papermc.paper.command.brigadier.argument.VanillaArgumentProvider
@@ -0,0 +1 @@
+io.papermc.paper.command.brigadier.argument.VanillaArgumentProviderImpl
