From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Owen1212055 <23108066+Owen1212055@users.noreply.github.com>
Date: Mon, 1 Aug 2022 22:50:34 -0400
Subject: [PATCH] Brigadier based command API

== AT ==
public net.minecraft.commands.arguments.blocks.BlockInput tag

diff --git a/src/main/java/com/mojang/brigadier/tree/CommandNode.java b/src/main/java/com/mojang/brigadier/tree/CommandNode.java
index 39844531b03eb8a6c70700b4ecbf0ff1a557424d..79bb09f27b09a2fefa6381e0b20be413f4586e46 100644
--- a/src/main/java/com/mojang/brigadier/tree/CommandNode.java
+++ b/src/main/java/com/mojang/brigadier/tree/CommandNode.java
@@ -35,6 +35,8 @@ public abstract class CommandNode<S> implements Comparable<CommandNode<S>> {
     private final boolean forks;
     private Command<S> command;
     public LiteralCommandNode<CommandSourceStack> clientNode = null; // Paper
+    public CommandNode<io.papermc.paper.command.brigadier.CommandSourceStack> unwrappedCached = null; // Paper
+    public CommandNode<io.papermc.paper.command.brigadier.CommandSourceStack> wrappedCached = null; // Paper
     // CraftBukkit start
     public void removeCommand(String name) {
         this.children.remove(name);
@@ -205,4 +207,11 @@ public abstract class CommandNode<S> implements Comparable<CommandNode<S>> {
     }
 
     public abstract Collection<String> getExamples();
+    // Paper start
+    public void clearAll() {
+        this.children.clear();
+        this.literals.clear();
+        this.arguments.clear();
+    }
+    // Paper end
 }
diff --git a/src/main/java/io/papermc/paper/command/brigadier/ApiMirrorRootNode.java b/src/main/java/io/papermc/paper/command/brigadier/ApiMirrorRootNode.java
new file mode 100644
index 0000000000000000000000000000000000000000..337d5221d9e086b9a1edc78a6d713150aab294ff
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/ApiMirrorRootNode.java
@@ -0,0 +1,239 @@
+package io.papermc.paper.command.brigadier;
+
+import com.google.common.collect.Collections2;
+import com.mojang.brigadier.CommandDispatcher;
+import com.mojang.brigadier.arguments.ArgumentType;
+import com.mojang.brigadier.arguments.BoolArgumentType;
+import com.mojang.brigadier.arguments.DoubleArgumentType;
+import com.mojang.brigadier.arguments.FloatArgumentType;
+import com.mojang.brigadier.arguments.IntegerArgumentType;
+import com.mojang.brigadier.arguments.LongArgumentType;
+import com.mojang.brigadier.arguments.StringArgumentType;
+import com.mojang.brigadier.suggestion.SuggestionProvider;
+import com.mojang.brigadier.tree.ArgumentCommandNode;
+import com.mojang.brigadier.tree.CommandNode;
+import com.mojang.brigadier.tree.LiteralCommandNode;
+import com.mojang.brigadier.tree.RootCommandNode;
+import io.papermc.paper.command.brigadier.argument.WrappedArgumentCommandNode;
+import io.papermc.paper.command.brigadier.argument.WrapperArgumentType;
+import net.minecraft.commands.synchronization.ArgumentTypeInfos;
+import net.minecraft.server.MinecraftServer;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Collection;
+import java.util.Set;
+
+/**
+ * This root command node is responsible for wrapping around vanilla's dispatcher.
+ * <p>
+ * The reason for this is conversion is we do NOT want there to be NMS types
+ * in the api. This allows us to reconstruct the nodes to be more api friendly, while
+ * we can then unwrap it when needed and convert them to NMS types.
+ * <p>
+ * Command nodes such as vanilla (those without a proper "api node")
+ * will be assigned a {@link ShadowBrigNode}.
+ * This prevents certain parts of it (children) from being accessed by the api.
+ */
+@SuppressWarnings({"unchecked", "rawtypes"})
+public class ApiMirrorRootNode extends RootCommandNode<CommandSourceStack> {
+
+    public static final CommandDispatcher<CommandSourceStack> DISPATCHER_INSTANCE = new CommandDispatcher<>(new ApiMirrorRootNode());
+
+    /**
+     * Represents argument types that are allowed to exist in the api.
+     * These typically represent primitives that don't need to be wrapped
+     * by NMS.
+     */
+    private static final Set<Class<?>> ARGUMENT_WHITELIST = Set.of(
+        BoolArgumentType.class,
+        DoubleArgumentType.class,
+        FloatArgumentType.class,
+        IntegerArgumentType.class,
+        LongArgumentType.class,
+        StringArgumentType.class
+    );
+
+    public CommandDispatcher<net.minecraft.commands.CommandSourceStack> getDispatcher() {
+        return MinecraftServer.getServer().getCommands().getDispatcher();
+    }
+
+    /**
+     * This logic is responsible for unwrapping an API node to be supported by NMS.
+     * See the method implementation for detailed steps.
+     *
+     * @param wrapped api provided node / node to be "wrapped"
+     * @return wrapped node
+     */
+    @NotNull
+    private CommandNode<CommandSourceStack> unwrapNode(CommandNode<CommandSourceStack> wrapped) {
+        /*
+        If the type is a shadow node we can assume that the type that it represents is an already supported NMS node.
+        This is because these are typically minecraft command nodes.
+         */
+        if (wrapped instanceof ShadowBrigNode shadowBrigNode) {
+            CommandNode node = shadowBrigNode.getHandle();
+            return node;
+        }
+
+        /*
+        This node already has had a unwrapped node created, so we can assume that it's safe to reuse that cached copy.
+         */
+        if (wrapped.unwrappedCached != null) {
+            return wrapped.unwrappedCached;
+        }
+
+        /*
+        Logic for wrapping each node.
+         */
+        CommandNode<CommandSourceStack> unwrapped;
+        if (wrapped instanceof LiteralCommandNode<CommandSourceStack> node) {
+            /*
+            Remap the literal node, we only have to account
+            for the redirect in this case.
+             */
+            unwrapped = this.simpleUnwrap(node);
+        } else if (wrapped instanceof ArgumentCommandNode original) {
+            ArgumentType<?> unwrappedArgType = original.getType();
+            /*
+            Check to see if this argument type is a wrapped type, if so we know that
+            we can unwrap the node to get an NMS type.
+             */
+            if (unwrappedArgType instanceof WrapperArgumentType<?, ?> wrappedNmsBrigArg) {
+                if (!ArgumentTypeInfos.isClassRecognized(wrappedNmsBrigArg.getWrapped().getClass())) {
+                    // Did they try passing a custom argument into the brig wrapper?
+                    throw new IllegalArgumentException("Custom argument type was passed, this was not a recognized type to send to the client! You must only pass vanilla arguments or primitive brig args in the wrapper!");
+                }
+
+                unwrapped = this.unwrapArgumentWrapper(original, wrappedNmsBrigArg);
+
+            /*
+            If it's not a wrapped type, it either has to be a primitive or an already
+            defined NMS type.
+            This method allows us to check if this is recognized by vanilla.
+             */
+            } else if (ArgumentTypeInfos.isClassRecognized(unwrappedArgType.getClass())) {
+                if (ARGUMENT_WHITELIST.contains(unwrappedArgType.getClass())) {
+                    // If this argument is whitelisted simply unwrap it and ignore the argument type.
+                    unwrapped = this.simpleUnwrap(original);
+                } else {
+                    // If this was an NMS type but not a primitive
+                    throw new IllegalArgumentException("NMS argument type was passed (%s), should be wrapped inside an WrapperArgumentType. Don't add NMS args here!".formatted(unwrappedArgType));
+                }
+            } else {
+                // Unknown argument type was passed
+                throw new IllegalArgumentException("Custom unknown argument type was passed, should be wrapped inside an WrapperArgumentType.");
+            }
+        } else {
+            throw new IllegalArgumentException("Unknown command node passed. Don't know how to unwrap this.");
+        }
+
+        /*
+        Add the children to the node, unwrapping each child in the process.
+         */
+        for (CommandNode<CommandSourceStack> child : wrapped.getChildren()) {
+            unwrapped.addChild(this.unwrapNode(child));
+        }
+
+        unwrapped.wrappedCached = wrapped;
+        wrapped.unwrappedCached = unwrapped;
+
+        return unwrapped;
+    }
+
+    /**
+     * This logic is responsible for rewrapping a node.
+     * If a node was unwrapped in the past, it should have a wrapped type
+     * stored in its cache.
+     * <p>
+     * However, if it doesn't seem to have a wrapped version we will return
+     * a {@link ShadowBrigNode} instead. This supports being unwrapped/wrapped while
+     * preventing the API from accessing it unsafely.
+     *
+     * @param unwrapped argument node
+     * @return wrapped node
+     */
+    @Nullable
+    private CommandNode<CommandSourceStack> wrapNode(@Nullable CommandNode<net.minecraft.commands.CommandSourceStack> unwrapped) {
+        if (unwrapped == null) {
+            return null;
+        }
+
+        /*
+        This was most likely created by API and has a wrapped variant,
+        so we can return this safely.
+         */
+        if (unwrapped.wrappedCached != null) {
+            return unwrapped.wrappedCached;
+        }
+
+        /*
+        We don't know the type of this, or where this came from.
+        Return a shadow, where we will allow the api to handle this but have
+        restrictive access.
+         */
+        CommandNode<CommandSourceStack> shadow = new ShadowBrigNode(unwrapped);
+        unwrapped.wrappedCached = shadow;
+        return shadow;
+    }
+
+    /**
+     * Nodes added to this dispatcher must be unwrapped
+     * in order to be added to the NMS dispatcher.
+     *
+     * @param node node to add
+     */
+    @Override
+    public void addChild(CommandNode<CommandSourceStack> node) {
+        CommandNode convertedNode = this.unwrapNode(node);
+        this.getDispatcher().getRoot().addChild(convertedNode);
+    }
+
+    /**
+     * Gets the children for the vanilla dispatcher,
+     * ensuring that all are wrapped.
+     *
+     * @return wrapped children
+     */
+    @Override
+    public Collection<CommandNode<CommandSourceStack>> getChildren() {
+        return Collections2.transform(this.getDispatcher().getRoot().getChildren(), (node) -> this.wrapNode(node));
+    }
+
+    @Override
+    public CommandNode<CommandSourceStack> getChild(String name) {
+        return this.wrapNode(this.getDispatcher().getRoot().getChild(name));
+    }
+
+    // These are needed for bukkit.. we should NOT allow this
+    @Override
+    public void removeCommand(String name) {
+        this.getDispatcher().getRoot().removeCommand(name);
+    }
+
+    @Override
+    public void clearAll() {
+        this.getDispatcher().getRoot().clearAll();
+    }
+
+    private CommandNode<CommandSourceStack> unwrapArgumentWrapper(ArgumentCommandNode node, WrapperArgumentType wrapperArgumentType) {
+        CommandNode redirectNode = node.getRedirect() == null ? null : this.unwrapNode(node.getRedirect());
+        SuggestionProvider suggestionProvider;
+        // If there is already a custom suggestion provider, ignore.
+        if (node.getCustomSuggestions() != null) {
+            suggestionProvider = node.getCustomSuggestions();
+        } else {
+            // If however we want to handle suggestions ourselves, reference the wrapper.
+            suggestionProvider = wrapperArgumentType.handleSuggestions() ? wrapperArgumentType::listSuggestions : null;
+        }
+
+        return new WrappedArgumentCommandNode<>(node.getName(), wrapperArgumentType, wrapperArgumentType.getWrapped(), node.getCommand(), node.getRequirement(), redirectNode, node.getRedirectModifier(), node.isFork(), suggestionProvider);
+    }
+
+    private CommandNode<CommandSourceStack> simpleUnwrap(CommandNode<CommandSourceStack> node) {
+        return node.createBuilder()
+            .redirect(node.getRedirect() == null ? null : this.unwrapNode(node.getRedirect()))
+            .build();
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/MessageComponentSerializerImpl.java b/src/main/java/io/papermc/paper/command/brigadier/MessageComponentSerializerImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..0b33c6cf2366568641e6f2fd7f74fb74f6ea0145
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/MessageComponentSerializerImpl.java
@@ -0,0 +1,20 @@
+package io.papermc.paper.command.brigadier;
+
+import com.mojang.brigadier.Message;
+import io.papermc.paper.adventure.PaperAdventure;
+import net.kyori.adventure.text.Component;
+import net.minecraft.network.chat.ComponentUtils;
+import org.jetbrains.annotations.NotNull;
+
+public final class MessageComponentSerializerImpl implements MessageComponentSerializer {
+
+    @Override
+    public @NotNull Component deserialize(@NotNull Message input) {
+        return PaperAdventure.asAdventure(ComponentUtils.fromMessage(input));
+    }
+
+    @Override
+    public @NotNull Message serialize(@NotNull Component component) {
+        return PaperAdventure.asVanilla(component);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/PaperBrigadier.java b/src/main/java/io/papermc/paper/command/brigadier/PaperBrigadier.java
new file mode 100644
index 0000000000000000000000000000000000000000..e7a2068848d5621440b0d9944fc63c721723475e
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/PaperBrigadier.java
@@ -0,0 +1,41 @@
+package io.papermc.paper.command.brigadier;
+
+import com.mojang.brigadier.CommandDispatcher;
+import com.mojang.brigadier.tree.CommandNode;
+import com.mojang.brigadier.tree.LiteralCommandNode;
+import io.papermc.paper.command.brigadier.bukkit.BukkitBrigForwardingMap;
+import net.minecraft.commands.Commands;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.Server;
+import org.bukkit.command.Command;
+import org.bukkit.craftbukkit.command.VanillaCommandWrapper;
+
+import java.util.List;
+
+public class PaperBrigadier {
+
+    @SuppressWarnings({"unchecked", "rawtypes"})
+    public static Command wrapNode(CommandNode node) {
+        Commands commands = MinecraftServer.getServer().getCommands();
+
+        if (node instanceof LiteralCommandNode) {
+            if (node instanceof PluginCommandNode pluginCommandNode) {
+                return new PluginVanillaCommandWrapper(pluginCommandNode.getName(), pluginCommandNode.getDescription(), pluginCommandNode.getUsageText(), List.of(), commands, node, pluginCommandNode.getPlugin());
+            } else {
+                return new VanillaCommandWrapper(commands, node);
+            }
+        } else {
+            throw new IllegalArgumentException("Unsure how to wrap a " + node);
+        }
+    }
+
+    @SuppressWarnings({"removal", "unchecked", "rawtypes"})
+    public static void moveBukkitCommands(Commands commands) {
+        CommandDispatcher erasedDispatcher = commands.getDispatcher();
+        Server server = Bukkit.getServer();
+        if (server != null) {
+            ((BukkitBrigForwardingMap) server.getCommandMap().getKnownCommands()).moveBukkitCommands(erasedDispatcher);
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/PaperCommandSourceStack.java b/src/main/java/io/papermc/paper/command/brigadier/PaperCommandSourceStack.java
new file mode 100644
index 0000000000000000000000000000000000000000..ea6b71ef412d2d6e7c0ed863ec80ade237bc9b4d
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/PaperCommandSourceStack.java
@@ -0,0 +1,36 @@
+package io.papermc.paper.command.brigadier;
+
+import com.destroystokyo.paper.brigadier.BukkitBrigadierCommandSource;
+import net.kyori.adventure.chat.SignedMessage;
+import net.minecraft.network.chat.PlayerChatMessage;
+import net.minecraft.world.phys.Vec2;
+import net.minecraft.world.phys.Vec3;
+import org.bukkit.command.CommandSender;
+
+public interface PaperCommandSourceStack extends CommandSourceStack, BukkitBrigadierCommandSource {
+
+    net.minecraft.commands.CommandSourceStack getHandle();
+
+    @Override
+    default org.bukkit.entity.Entity getBukkitEntity() {
+        return this.getHandle().getEntity() != null ? this.getHandle().getEntity().getBukkitEntity() : null;
+    }
+
+    @Override
+    default org.bukkit.World getBukkitWorld() {
+        return this.getHandle().getLevel() != null ? this.getHandle().getLevel().getWorld() : null;
+    }
+
+    @Override
+    default org.bukkit.Location getBukkitLocation() {
+        Vec3 pos = this.getHandle().getPosition();
+        org.bukkit.World world = this.getBukkitWorld();
+        Vec2 rot = this.getHandle().getRotation();
+        return world != null && pos != null ? new org.bukkit.Location(world, pos.x, pos.y, pos.z, rot != null ? rot.x : 0, rot != null ? rot.y : 0) : null;
+    }
+
+    @Override
+    default CommandSender getBukkitSender() {
+        return this.getHandle().getBukkitSender();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/PluginVanillaCommandWrapper.java b/src/main/java/io/papermc/paper/command/brigadier/PluginVanillaCommandWrapper.java
new file mode 100644
index 0000000000000000000000000000000000000000..bdb7223453be2ed971941ab57e226133e42b76ec
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/PluginVanillaCommandWrapper.java
@@ -0,0 +1,33 @@
+package io.papermc.paper.command.brigadier;
+
+import com.mojang.brigadier.tree.CommandNode;
+import net.minecraft.commands.CommandSourceStack;
+import net.minecraft.commands.Commands;
+import org.bukkit.command.PluginIdentifiableCommand;
+import org.bukkit.craftbukkit.command.VanillaCommandWrapper;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.List;
+
+// Exists to that /help can show the plugin
+public class PluginVanillaCommandWrapper extends VanillaCommandWrapper implements PluginIdentifiableCommand {
+
+    private final Plugin plugin;
+
+    public PluginVanillaCommandWrapper(String name, String description, String usageMessage, List<String> aliases, Commands dispatcher, CommandNode<CommandSourceStack> vanillaCommand, Plugin plugin) {
+        super(name, description, usageMessage, aliases, dispatcher, vanillaCommand);
+        this.plugin = plugin;
+    }
+
+    @Override
+    public @NotNull Plugin getPlugin() {
+        return this.plugin;
+    }
+
+    // Show in help menu!
+    @Override
+    public boolean isRegistered() {
+        return true;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/ShadowBrigNode.java b/src/main/java/io/papermc/paper/command/brigadier/ShadowBrigNode.java
new file mode 100644
index 0000000000000000000000000000000000000000..933859cd177e463e5a38906882e5cf24721264ae
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/ShadowBrigNode.java
@@ -0,0 +1,35 @@
+package io.papermc.paper.command.brigadier;
+
+import com.mojang.brigadier.tree.CommandNode;
+import com.mojang.brigadier.tree.LiteralCommandNode;
+
+import java.util.Collection;
+
+public class ShadowBrigNode extends LiteralCommandNode<CommandSourceStack> {
+
+    private final CommandNode<net.minecraft.commands.CommandSourceStack> handle;
+
+    public ShadowBrigNode(CommandNode<net.minecraft.commands.CommandSourceStack> node) {
+        super(node.getName(), context -> 0, (s) -> false, node.getRedirect() == null ? null : new ShadowBrigNode(node.getRedirect()), null, node.isFork());
+        this.handle = node;
+    }
+
+    @Override
+    public Collection<CommandNode<CommandSourceStack>> getChildren() {
+        throw new UnsupportedOperationException("Cannot retrieve children from this node.");
+    }
+
+    @Override
+    public CommandNode<CommandSourceStack> getChild(String name) {
+        throw new UnsupportedOperationException("Cannot retrieve children from this node.");
+    }
+
+    @Override
+    public void addChild(CommandNode<CommandSourceStack> node) {
+        throw new UnsupportedOperationException("Cannot modify children for this node.");
+    }
+
+    public CommandNode<net.minecraft.commands.CommandSourceStack> getHandle() {
+        return handle;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/argument/MessageArgumentImpl.java b/src/main/java/io/papermc/paper/command/brigadier/argument/MessageArgumentImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..adc0df7c3a762d99e7ad458576d4be68e94cc351
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/argument/MessageArgumentImpl.java
@@ -0,0 +1,29 @@
+package io.papermc.paper.command.brigadier.argument;
+
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import net.kyori.adventure.chat.SignedMessage;
+import net.minecraft.commands.CommandSourceStack;
+import net.minecraft.commands.arguments.MessageArgument;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.concurrent.CompletableFuture;
+
+public record MessageArgumentImpl(MessageArgument.Message message) implements MessageArgumentResponse {
+    @Override
+    public String content() {
+        return this.message.getText();
+    }
+
+    @Override
+    public @NotNull CompletableFuture<SignedMessage> resolveSignedMessage(String argumentName, CommandContext erased) throws CommandSyntaxException {
+        CommandContext<CommandSourceStack> type = erased;
+        CompletableFuture<SignedMessage> future = new CompletableFuture<>();
+
+        MessageArgument.Message response = type.getArgument(argumentName, MessageArgumentImpl.class).message;
+        MessageArgument.resolveChatMessage(response, type, argumentName, (message) -> {
+            future.complete(message.adventureView());
+        });
+        return future;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/argument/VanillaArgumentProviderImpl.java b/src/main/java/io/papermc/paper/command/brigadier/argument/VanillaArgumentProviderImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..6fb7297da9f743fd5b99b5a2261afe76261dd045
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/argument/VanillaArgumentProviderImpl.java
@@ -0,0 +1,132 @@
+package io.papermc.paper.command.brigadier.argument;
+
+import com.destroystokyo.paper.profile.CraftPlayerProfile;
+import com.destroystokyo.paper.profile.PlayerProfile;
+import com.mojang.brigadier.arguments.ArgumentType;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import io.papermc.paper.adventure.PaperAdventure;
+import io.papermc.paper.math.BlockPosition;
+import io.papermc.paper.math.Position;
+import net.kyori.adventure.text.Component;
+import net.minecraft.commands.CommandBuildContext;
+import net.minecraft.commands.CommandSourceStack;
+import net.minecraft.commands.arguments.ColorArgument;
+import net.minecraft.commands.arguments.ComponentArgument;
+import net.minecraft.commands.arguments.EntityArgument;
+import net.minecraft.commands.arguments.GameProfileArgument;
+import net.minecraft.commands.arguments.MessageArgument;
+import net.minecraft.commands.arguments.UuidArgument;
+import net.minecraft.commands.arguments.blocks.BlockStateArgument;
+import net.minecraft.commands.arguments.coordinates.BlockPosArgument;
+import net.minecraft.commands.arguments.item.ItemArgument;
+import net.minecraft.core.BlockPos;
+import net.minecraft.data.registries.VanillaRegistries;
+import net.minecraft.world.flag.FeatureFlagSet;
+import net.minecraft.world.flag.FeatureFlags;
+import net.minecraft.world.phys.Vec3;
+import org.bukkit.Color;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.block.CraftBlockStates;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Collection;
+import java.util.List;
+import java.util.UUID;
+import java.util.stream.Collectors;
+
+public class VanillaArgumentProviderImpl implements VanillaArguments.VanillaArgumentProvider {
+
+    private final CommandBuildContext commandbuildcontext = CommandBuildContext.simple(VanillaRegistries.createLookup(), FeatureFlagSet.of(FeatureFlags.VANILLA)); // TODO
+
+    @Override
+    public ArgumentType<ItemStack> itemStack() {
+        return this.of(ItemArgument.item(this.commandbuildcontext), (result) -> {
+            return CraftItemStack.asBukkitCopy(result.createItemStack(1, true));
+        });
+    }
+
+    @Override
+    public ArgumentType<BlockState> blockState() {
+        return this.of(BlockStateArgument.block(this.commandbuildcontext), (result) -> {
+            return CraftBlockStates.getBlockState(result.getState(), result.tag);
+        });
+    }
+
+    @Override
+    public ArgumentType<MessageArgumentResponse> signedMessage() {
+        return this.of(MessageArgument.message(), MessageArgumentImpl::new);
+    }
+
+    @Override
+    public @NotNull ArgumentType<ArgumentResolver<Entity>> entity() {
+        return this.of(EntityArgument.entity(), (result) -> sourceStack -> {
+            return result.findSingleEntity((CommandSourceStack) sourceStack).getBukkitEntity();
+        });
+    }
+
+    @Override
+    public @NotNull ArgumentType<ArgumentResolver<Collection<Entity>>> entities() {
+        return this.of(EntityArgument.entity(), (result) -> sourceStack -> {
+            return result.findEntities((CommandSourceStack) sourceStack).stream().map(net.minecraft.world.entity.Entity::getBukkitEntity).collect(Collectors.toList());
+        });
+    }
+
+    @Override
+    public @NotNull ArgumentType<ArgumentResolver<Player>> player() {
+        return this.of(EntityArgument.player(), (result) -> sourceStack -> {
+            return (Player) result.findSingleEntity((CommandSourceStack) sourceStack).getBukkitEntity();
+        });
+    }
+
+    @Override
+    public @NotNull ArgumentType<ArgumentResolver<Collection<Player>>> players() {
+        return this.of(EntityArgument.entity(), (result) -> sourceStack -> {
+            return result.findEntities((CommandSourceStack) sourceStack).stream().map((player) -> (Player) player.getBukkitEntity()).collect(Collectors.toList());
+        });
+    }
+
+    @Override
+    public @NotNull ArgumentType<ArgumentResolver<Collection<PlayerProfile>>> playerProfiles() {
+        return this.of(GameProfileArgument.gameProfile(), (result) -> sourceStack -> {
+            return result.getNames((CommandSourceStack) sourceStack).stream().map(CraftPlayerProfile::new).collect(Collectors.toList());
+        });
+    }
+
+    @Override
+    public @NotNull ArgumentType<ArgumentResolver<BlockPosition>> blockPos() {
+        return this.of(BlockPosArgument.blockPos(), (result) -> sourceStack -> {
+            BlockPos pos = result.getBlockPos((CommandSourceStack) sourceStack);
+
+            return Position.block(pos.getX(), pos.getY(), pos.getZ());
+        });
+    }
+
+    @Override
+    public ArgumentType<UUID> uuid() {
+        return this.of(UuidArgument.uuid(), (identity) -> identity);
+    }
+
+    @Override
+    public @NotNull ArgumentType<Component> component() {
+        return this.of(ComponentArgument.textComponent(), PaperAdventure::asAdventure);
+    }
+
+    private <B, C> ArgumentType<C> of(ArgumentType<B> base, ResultConverter<B, C> converter) {
+        return new WrapperArgumentType<>(base) {
+            @Override
+            public @NotNull C convert(B baseType) throws CommandSyntaxException {
+                return converter.convert(baseType);
+            }
+        };
+    }
+
+    @FunctionalInterface
+    interface ResultConverter<T, R> {
+
+        R convert(T type) throws CommandSyntaxException;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/argument/WrappedArgumentCommandNode.java b/src/main/java/io/papermc/paper/command/brigadier/argument/WrappedArgumentCommandNode.java
new file mode 100644
index 0000000000000000000000000000000000000000..7a838bab16b33025b9a2eae8325f353ad9689e1b
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/argument/WrappedArgumentCommandNode.java
@@ -0,0 +1,45 @@
+package io.papermc.paper.command.brigadier.argument;
+
+import com.mojang.brigadier.Command;
+import com.mojang.brigadier.RedirectModifier;
+import com.mojang.brigadier.StringReader;
+import com.mojang.brigadier.arguments.ArgumentType;
+import com.mojang.brigadier.context.CommandContextBuilder;
+import com.mojang.brigadier.context.ParsedArgument;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import com.mojang.brigadier.suggestion.SuggestionProvider;
+import com.mojang.brigadier.tree.ArgumentCommandNode;
+import com.mojang.brigadier.tree.CommandNode;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import net.minecraft.commands.synchronization.ArgumentTypeInfos;
+
+import java.util.function.Predicate;
+
+/*
+Basically this converts the argument to a different type when parsing.
+ */
+public class WrappedArgumentCommandNode<NMS, API> extends ArgumentCommandNode<CommandSourceStack, NMS> {
+
+    private final ArgumentType<API> argument;
+
+    public WrappedArgumentCommandNode(String name, ArgumentType<API> argument, ArgumentType<NMS> nms, Command<CommandSourceStack> command, Predicate<CommandSourceStack> requirement, CommandNode<CommandSourceStack> redirect, RedirectModifier<CommandSourceStack> modifier, boolean forks, SuggestionProvider<CommandSourceStack> customSuggestions) {
+        super(name, nms, command, requirement, redirect, modifier, forks, customSuggestions);
+        if (!ArgumentTypeInfos.isClassRecognized(nms.getClass())) {
+            // Is this argument an NMS argument?
+            throw new IllegalArgumentException("Unexpected argument type was passed. This should be an NMS type!");
+        }
+
+        this.argument = argument;
+    }
+
+    // See ArgumentCommandNode#parse
+    @Override
+    public void parse(StringReader reader, CommandContextBuilder<CommandSourceStack> contextBuilder) throws CommandSyntaxException {
+        final int start = reader.getCursor();
+        API result = this.argument.parse(reader); // Use the api argument parser
+        final ParsedArgument<CommandSourceStack, API> parsed = new ParsedArgument<>(start, reader.getCursor(), result); // Return an API parsed argument instead.
+
+        contextBuilder.withArgument(this.getName(), parsed);
+        contextBuilder.withNode(this, parsed.getRange());
+    }
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/bukkit/BukkitBrigForwardingMap.java b/src/main/java/io/papermc/paper/command/brigadier/bukkit/BukkitBrigForwardingMap.java
new file mode 100644
index 0000000000000000000000000000000000000000..2ed324a568775061da218d2c1dde6152bf77a0e9
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/bukkit/BukkitBrigForwardingMap.java
@@ -0,0 +1,376 @@
+package io.papermc.paper.command.brigadier.bukkit;
+
+import com.google.common.collect.Iterators;
+import com.mojang.brigadier.CommandDispatcher;
+import com.mojang.brigadier.tree.CommandNode;
+import com.mojang.brigadier.tree.LiteralCommandNode;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import io.papermc.paper.command.brigadier.PaperBrigadier;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.AbstractCollection;
+import java.util.AbstractSet;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Objects;
+import java.util.Set;
+import java.util.Spliterator;
+import java.util.function.Consumer;
+import java.util.stream.Stream;
+
+/*
+This map is supposed to act as a legacy bridge for the command map and the command dispatcher.
+ */
+public class BukkitBrigForwardingMap extends HashMap<String, Command> {
+
+    private final EntrySet entrySet = new EntrySet();
+    private final KeySet keySet = new KeySet();
+    private final Values values = new Values();
+
+    // Previous dispatcher used to get commands to migrate to another dispatcher
+    private CommandDispatcher<CommandSourceStack> previousDispatcher;
+    // Dispatcher override used for inserting new commands into another dispatcher
+    private CommandDispatcher<CommandSourceStack> dispatcherOverride;
+
+    CommandDispatcher<CommandSourceStack> getDispatcher() {
+        if (this.dispatcherOverride != null) {
+            return this.dispatcherOverride;
+        }
+
+        CommandDispatcher<CommandSourceStack> dispatcher = Bukkit.getServer().getCommandDispatcher();
+        if (this.previousDispatcher == null) {
+            this.previousDispatcher = dispatcher;
+        }
+
+        return dispatcher;
+    }
+
+    public void moveBukkitCommands(CommandDispatcher<CommandSourceStack> newDispatcher) {
+        if (this.previousDispatcher == null) {
+            return;
+        }
+        CommandDispatcher<CommandSourceStack> oldDispatcher = this.previousDispatcher;
+
+        // Migrate OLD bukkit nodes to the new dispatcher
+        this.dispatcherOverride = newDispatcher;
+        try {
+            for (CommandNode<?> child : new ArrayList<>(oldDispatcher.getRoot().getChildren())) {
+                if (child instanceof BukkitCommandNode bukkitCommandNode) {
+                    this.put(bukkitCommandNode.getLiteral(), bukkitCommandNode.getBukkitCommand());
+                }
+            }
+        } finally {
+            this.dispatcherOverride = null;
+        }
+
+        this.previousDispatcher = newDispatcher;
+    }
+
+    @Override
+    public int size() {
+        return this.getDispatcher().getRoot().getChildren().size();
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return this.size() != 0;
+    }
+
+    @Override
+    public boolean containsKey(Object key) {
+        if (!(key instanceof String stringKey)) {
+            return false;
+        }
+
+        // Do any children match?
+        return this.getDispatcher().getRoot().getChild(stringKey) != null;
+    }
+
+    @Override
+    public boolean containsValue(Object value) {
+        if (value == null) {
+            return false;
+        }
+
+        for (CommandNode<CommandSourceStack> child : this.getDispatcher().getRoot().getChildren()) {
+            // If child is a bukkit command node, we can convert it!
+            if (child instanceof BukkitCommandNode bukkitCommandNode) {
+                return bukkitCommandNode.getBukkitCommand().equals(value);
+            }
+        }
+
+        return false;
+    }
+
+    @Override
+    public Command get(Object key) {
+        for (CommandNode<CommandSourceStack> child : this.getDispatcher().getRoot().getChildren()) {
+            if (child instanceof LiteralCommandNode<CommandSourceStack> literalCommandNode && literalCommandNode.getLiteral().equals(key)) {
+                if (literalCommandNode instanceof BukkitCommandNode bukkitCommandNode) {
+                    return bukkitCommandNode.getBukkitCommand();
+                }
+
+                return PaperBrigadier.wrapNode(child);
+            }
+        }
+
+
+        return null;
+    }
+
+    @Nullable
+    @Override
+    public Command put(String key, Command value) {
+        Command old = this.get(key);
+        this.getDispatcher().getRoot().removeCommand(key); // Override previous command
+        this.getDispatcher().getRoot().addChild(BukkitCommandNode.of(key, value));
+        return old;
+    }
+
+    @Override
+    public Command remove(Object key) {
+        Command old = this.get(key);
+        if (old != null) {
+            this.attemptRemoveAll(old);
+        }
+        return old;
+    }
+
+    @Override
+    public boolean remove(Object key, Object value) {
+        Command old = this.get(key);
+        if (Objects.equals(old, value)) {
+            this.attemptRemoveAll(old);
+            return true;
+        }
+
+        return false;
+    }
+
+    private void attemptRemoveAll(Command command) {
+        String namespace = command.registeredNamespace;
+        for (String alias : command.getAliases()) {
+            this.getDispatcher().getRoot().removeCommand(alias);
+            if (namespace != null) {
+                this.getDispatcher().getRoot().removeCommand(namespace + ":" + alias);
+            }
+        }
+
+        if (namespace != null) {
+            this.getDispatcher().getRoot().removeCommand(namespace + ":" + command.getName());
+        }
+        this.getDispatcher().getRoot().removeCommand(command.getName());
+    }
+
+    @Override
+    public void putAll(@NotNull Map<? extends String, ? extends Command> m) {
+        for (Entry<? extends String, ? extends Command> entry : m.entrySet()) {
+            this.put(entry.getKey(), entry.getValue());
+        }
+    }
+
+    @Override
+    public void clear() {
+        this.getDispatcher().getRoot().clearAll();
+    }
+
+    @NotNull
+    @Override
+    public Set<String> keySet() {
+        return this.keySet;
+    }
+
+    @NotNull
+    @Override
+    public Collection<Command> values() {
+        return this.values;
+    }
+
+    @NotNull
+    @Override
+    public Set<Entry<String, Command>> entrySet() {
+        return this.entrySet;
+    }
+
+    final class Values extends AbstractCollection<Command> {
+
+        @Override
+        public Iterator<Command> iterator() {
+            // AVOID CME since commands can modify multiple commands now through alises, which means it may appear in the iterator even if removed.
+            // Oh well!
+            Iterator<CommandNode<CommandSourceStack>> iterator = new ArrayList<>(BukkitBrigForwardingMap.this.getDispatcher().getRoot().getChildren()).iterator();
+
+            return new Iterator<>() {
+
+                private CommandNode<CommandSourceStack> lastFetched;
+
+                @Override
+                public void remove() {
+                    if (this.lastFetched == null) {
+                        throw new IllegalStateException("next not yet called");
+                    }
+
+                    BukkitBrigForwardingMap.this.remove(this.lastFetched.getName());
+                    iterator.remove();
+                }
+
+                @Override
+                public boolean hasNext() {
+                    return iterator.hasNext();
+                }
+
+                @Override
+                public Command next() {
+                    CommandNode<CommandSourceStack> next = iterator.next();
+                    this.lastFetched = next;
+                    if (next instanceof BukkitCommandNode bukkitCommandNode) {
+                        return bukkitCommandNode.getBukkitCommand();
+                    } else {
+                        return PaperBrigadier.wrapNode(next);
+                    }
+                }
+            };
+        }
+
+        @Override
+        public int size() {
+            return BukkitBrigForwardingMap.this.getDispatcher().getRoot().getChildren().size();
+        }
+
+        @Override
+        public void clear() {
+            BukkitBrigForwardingMap.this.clear();
+        }
+    }
+
+
+    final class KeySet extends AbstractSet<String> {
+
+        @Override
+        public int size() {
+            return BukkitBrigForwardingMap.this.size();
+        }
+
+        @Override
+        public void clear() {
+            BukkitBrigForwardingMap.this.clear();
+        }
+
+        @Override
+        public Iterator<String> iterator() {
+            return Iterators.transform(BukkitBrigForwardingMap.this.values.iterator(), Command::getName); // Wrap around the values iterator for consistancy
+        }
+
+        @Override
+        public boolean contains(Object o) {
+            return BukkitBrigForwardingMap.this.containsKey(o);
+        }
+
+        @Override
+        public boolean remove(Object o) {
+            return BukkitBrigForwardingMap.this.remove(o) != null;
+        }
+
+        @Override
+        public Spliterator<String> spliterator() {
+            return this.entryStream().spliterator();
+        }
+
+        @Override
+        public void forEach(Consumer<? super String> action) {
+            this.entryStream().forEach(action);
+        }
+
+        private Stream<String> entryStream() {
+            return BukkitBrigForwardingMap.this.getDispatcher().getRoot().getChildren().stream().map(CommandNode::getName);
+        }
+    }
+
+    final class EntrySet extends AbstractSet<Entry<String, Command>> {
+        @Override
+        public int size() {
+            return BukkitBrigForwardingMap.this.size();
+        }
+
+
+        @Override
+        public void clear() {
+            BukkitBrigForwardingMap.this.clear();
+        }
+
+        @Override
+        public Iterator<Entry<String, Command>> iterator() {
+            return this.entryStream().iterator();
+        }
+
+        @Override
+        public boolean contains(Object o) {
+            if (!(o instanceof Map.Entry<?, ?> entry)) {
+                return false;
+            }
+
+            Object key = entry.getKey();
+            Command candidate = get(key);
+            return candidate != null && candidate.equals(entry.getValue());
+        }
+
+        @Override
+        public boolean remove(Object o) {
+            if (o instanceof Map.Entry<?, ?> e) {
+                Object key = e.getKey();
+                Object value = e.getValue();
+                return BukkitBrigForwardingMap.this.remove(key, value);
+            }
+            return false;
+        }
+
+        @Override
+        public Spliterator<Entry<String, Command>> spliterator() {
+            return this.entryStream().spliterator();
+        }
+
+        @Override
+        public void forEach(Consumer<? super Entry<String, Command>> action) {
+            this.entryStream().forEach(action);
+        }
+
+        private Stream<Map.Entry<String, Command>> entryStream() {
+            return BukkitBrigForwardingMap.this.getDispatcher().getRoot().getChildren().stream().map(BukkitBrigForwardingMap.this::nodeToEntry);
+        }
+    }
+
+    private Map.Entry<String, Command> nodeToEntry(CommandNode<?> node) {
+        if (node instanceof BukkitCommandNode bukkitCommandNode) {
+            return this.mutableEntry(bukkitCommandNode.getName(), bukkitCommandNode.getBukkitCommand());
+        } else {
+            Command wrapped = PaperBrigadier.wrapNode(node);
+            return this.mutableEntry(node.getName(), wrapped);
+        }
+    }
+
+    private Map.Entry<String, Command> mutableEntry(String key, Command command) {
+        return new Entry<>() {
+            @Override
+            public String getKey() {
+                return key;
+            }
+
+            @Override
+            public Command getValue() {
+                return command;
+            }
+
+            @Override
+            public Command setValue(Command value) {
+                return BukkitBrigForwardingMap.this.put(key, value);
+            }
+        };
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/command/brigadier/bukkit/BukkitCommandNode.java b/src/main/java/io/papermc/paper/command/brigadier/bukkit/BukkitCommandNode.java
new file mode 100644
index 0000000000000000000000000000000000000000..6deef2537408830fab0b8ba0b1eb2858aa024804
--- /dev/null
+++ b/src/main/java/io/papermc/paper/command/brigadier/bukkit/BukkitCommandNode.java
@@ -0,0 +1,144 @@
+package io.papermc.paper.command.brigadier.bukkit;
+
+import co.aikar.timings.Timing;
+import com.mojang.brigadier.arguments.StringArgumentType;
+import com.mojang.brigadier.builder.RequiredArgumentBuilder;
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import com.mojang.brigadier.suggestion.SuggestionProvider;
+import com.mojang.brigadier.suggestion.Suggestions;
+import com.mojang.brigadier.suggestion.SuggestionsBuilder;
+import com.mojang.brigadier.tree.LiteralCommandNode;
+import io.papermc.paper.command.brigadier.CommandSourceStack;
+import net.minecraft.commands.CommandSource;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandException;
+import org.bukkit.command.CommandSender;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.concurrent.CompletableFuture;
+import java.util.logging.Level;
+
+public class BukkitCommandNode extends LiteralCommandNode<CommandSourceStack> {
+
+    private final Command command;
+
+    private BukkitCommandNode(String literal, Command command, BukkitBrigCommand bukkitBrigCommand) {
+        super(
+            literal, bukkitBrigCommand, source -> {
+                // If the source is null, assume it's true.
+                // As bukkit doesn't really map the command sender well in all cases
+                if (((net.minecraft.commands.CommandSourceStack) source).source == CommandSource.NULL) {
+                    return true;
+                } else {
+                    return command.testPermissionSilent(source.getBukkitSender());
+                }
+            },
+            null, null, false
+        );
+        this.command = command;
+    }
+
+    public static BukkitCommandNode of(String name, Command command) {
+        BukkitBrigCommand bukkitBrigCommand = new BukkitBrigCommand(command, name);
+        BukkitCommandNode commandNode = new BukkitCommandNode(name, command, bukkitBrigCommand);
+        commandNode.addChild(
+            RequiredArgumentBuilder.<CommandSourceStack, String>argument("args", StringArgumentType.greedyString())
+                .suggests(new BukkitBrigSuggestionProvider(command, name))
+                .executes(bukkitBrigCommand).build()
+        );
+
+        return commandNode;
+    }
+
+    public Command getBukkitCommand() {
+        return this.command;
+    }
+
+    static class BukkitBrigCommand implements com.mojang.brigadier.Command<CommandSourceStack> {
+
+        private final org.bukkit.command.Command command;
+        private final String literal;
+
+        BukkitBrigCommand(org.bukkit.command.Command command, String literal) {
+            this.command = command;
+            this.literal = literal;
+        }
+
+        @Override
+        public int run(CommandContext<CommandSourceStack> context) throws CommandSyntaxException {
+            CommandSender sender = context.getSource().getBukkitSender();
+
+            // Plugins do weird things to workaround normal registration
+            if (this.command.timings == null) {
+                this.command.timings = co.aikar.timings.TimingsManager.getCommandTiming(null, this.command);
+            }
+
+            String content = context.getRange().get(context.getInput());
+            String[] args = org.apache.commons.lang3.StringUtils.split(content, ' '); // fix adjacent spaces (from console/plugins) causing empty array elements
+
+            try (Timing ignored = this.command.timings.startTiming()) {
+                // Note: we don't return the result of target.execute as thats success / failure, we return handled (true) or not handled (false)
+                this.command.execute(sender, this.literal, Arrays.copyOfRange(args, 1, args.length));
+            }
+
+            // return true as command was handled
+            return 1;
+        }
+    }
+
+    static class BukkitBrigSuggestionProvider implements SuggestionProvider<CommandSourceStack> {
+
+        private final org.bukkit.command.Command command;
+        private final String literal;
+
+        BukkitBrigSuggestionProvider(org.bukkit.command.Command command, String literal) {
+            this.command = command;
+            this.literal = literal;
+        }
+
+        @Override
+        public CompletableFuture<Suggestions> getSuggestions(CommandContext<CommandSourceStack> context, SuggestionsBuilder builder) throws CommandSyntaxException {
+            // Paper start
+            org.bukkit.command.CommandSender sender = context.getSource().getBukkitSender();
+            if (!(sender instanceof org.bukkit.entity.Player player)) {
+                return CompletableFuture.completedFuture(builder.build());
+            }
+
+            String[] args = builder.getRemaining().split(" "); // We need the command included
+
+            List<String> results = null;
+            Location pos = context.getSource().getBukkitLocation();
+            try {
+
+                if (pos == null) {
+                    results = this.command.tabComplete(sender, this.literal, args);
+                } else {
+                    results = this.command.tabComplete(sender, this.literal, args, pos.clone());
+                }
+            } catch (CommandException ex) {
+                player.sendMessage(ChatColor.RED + "An internal error occurred while attempting to tab-complete this command");
+                Bukkit.getServer().getLogger().log(Level.SEVERE, "Exception when " + player.getName() + " attempted to tab complete " + builder.getRemaining(), ex);
+            }
+
+            // Paper end
+            if (results == null) {
+                return builder.buildFuture();
+            }
+
+            // Defaults to sub nodes, but we have just one giant args node, so offset accordingly
+            builder = builder.createOffset(builder.getInput().lastIndexOf(' ') + 1);
+
+            for (String s : results) {
+                builder.suggest(s);
+            }
+
+            return builder.buildFuture();
+        }
+    }
+
+}
diff --git a/src/main/java/net/minecraft/commands/CommandSourceStack.java b/src/main/java/net/minecraft/commands/CommandSourceStack.java
index 7b6b51392b123d34382233adcf4c3d4867bdaa32..4b8ccb8b77990ab1ac9f03d7451878bb29aa923f 100644
--- a/src/main/java/net/minecraft/commands/CommandSourceStack.java
+++ b/src/main/java/net/minecraft/commands/CommandSourceStack.java
@@ -41,7 +41,7 @@ import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
 import com.mojang.brigadier.tree.CommandNode; // CraftBukkit
 
-public class CommandSourceStack implements SharedSuggestionProvider, com.destroystokyo.paper.brigadier.BukkitBrigadierCommandSource { // Paper
+public class CommandSourceStack implements SharedSuggestionProvider, io.papermc.paper.command.brigadier.PaperCommandSourceStack { // Paper
 
     public static final SimpleCommandExceptionType ERROR_NOT_PLAYER = new SimpleCommandExceptionType(Component.translatable("permissions.requires.player"));
     public static final SimpleCommandExceptionType ERROR_NOT_ENTITY = new SimpleCommandExceptionType(Component.translatable("permissions.requires.entity"));
@@ -171,25 +171,7 @@ public class CommandSourceStack implements SharedSuggestionProvider, com.destroy
         return this.textName;
     }
 
-    // Paper start
-    @Override
-    public org.bukkit.entity.Entity getBukkitEntity() {
-        return getEntity() != null ? getEntity().getBukkitEntity() : null;
-    }
 
-    @Override
-    public org.bukkit.World getBukkitWorld() {
-        return getLevel() != null ? getLevel().getWorld() : null;
-    }
-
-    @Override
-    public org.bukkit.Location getBukkitLocation() {
-        Vec3 pos = getPosition();
-        org.bukkit.World world = getBukkitWorld();
-        Vec2 rot = getRotation();
-        return world != null && pos != null ? new org.bukkit.Location(world, pos.x, pos.y, pos.z, rot != null ? rot.y : 0, rot != null ? rot.x : 0) : null;
-    }
-    // Paper end
 
     @Override
     public boolean hasPermission(int level) {
@@ -416,6 +398,12 @@ public class CommandSourceStack implements SharedSuggestionProvider, com.destroy
         return this.level.enabledFeatures();
     }
 
+    // Paper start
+    @Override
+    public CommandSourceStack getHandle() {
+        return this;
+    }
+    // Paper end
     // CraftBukkit start
     public org.bukkit.command.CommandSender getBukkitSender() {
         return this.source.getBukkitSender(this);
diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index 87cc7562e4a166d078fe11b7f6980497fc0bd33e..8b871096492b3804d24ea884be97a5f418a3227f 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -236,6 +236,17 @@ public class Commands {
             }
         }
         // Paper end
+        // Paper start
+        // Create legacy minecraft namespace commands
+        for (final CommandNode<CommandSourceStack> node : new java.util.ArrayList<>(this.dispatcher.getRoot().getChildren())) {
+            this.dispatcher.register(
+                com.mojang.brigadier.builder.LiteralArgumentBuilder.<CommandSourceStack>literal("minecraft:" + node.getName())
+                    .executes(node.getCommand())
+                    .redirect(node)
+            );
+        }
+        io.papermc.paper.command.brigadier.PaperBrigadier.moveBukkitCommands(this);
+        // Paper end
         // CraftBukkit start
     }
 
@@ -307,6 +318,11 @@ public class Commands {
     }
 
     public int performCommand(ParseResults<CommandSourceStack> parseresults, String s, String label) { // CraftBukkit
+    // Paper start
+        return this.performCommand(parseresults, s, label, false);
+    }
+    public int performCommand(ParseResults<CommandSourceStack> parseresults, String s, String label, boolean throwCommandError) {
+    // Paper end
         CommandSourceStack commandlistenerwrapper = (CommandSourceStack) parseresults.getContext().getSource();
 
         commandlistenerwrapper.getServer().getProfiler().push(() -> {
@@ -372,6 +388,7 @@ public class Commands {
                 b1 = 0;
                 return b1;
             } catch (Exception exception) {
+                if (throwCommandError) throw exception;
                 MutableComponent ichatmutablecomponent2 = Component.literal(exception.getMessage() == null ? exception.getClass().getName() : exception.getMessage());
 
                 if (Commands.LOGGER.isDebugEnabled()) {
@@ -430,7 +447,7 @@ public class Commands {
         Map<CommandNode<CommandSourceStack>, CommandNode<SharedSuggestionProvider>> map = Maps.newIdentityHashMap(); // Use identity to prevent aliasing issues
         RootCommandNode vanillaRoot = new RootCommandNode();
 
-        RootCommandNode<CommandSourceStack> vanilla = player.server.vanillaCommandDispatcher.getDispatcher().getRoot();
+        RootCommandNode<CommandSourceStack> vanilla = player.server.getCommands().getDispatcher().getRoot(); // Paper
         map.put(vanilla, vanillaRoot);
         this.fillUsableCommands(vanilla, vanillaRoot, player.createCommandSourceStack(), (Map) map);
 
@@ -468,6 +485,7 @@ public class Commands {
     }
 
     private void fillUsableCommands(CommandNode<CommandSourceStack> tree, CommandNode<SharedSuggestionProvider> result, CommandSourceStack source, Map<CommandNode<CommandSourceStack>, CommandNode<SharedSuggestionProvider>> resultNodes) {
+        resultNodes.keySet().removeIf((node) -> !org.spigotmc.SpigotConfig.sendNamespaced && node.getName().contains( ":" )); // Paper - Remove namedspaced from result nodes to prevent redirect trimming ~ see comment below
         Iterator iterator = tree.getChildren().iterator();
 
         boolean registeredAskServerSuggestionsForTree = false; // Paper - tell clients to ask server for suggestions for EntityArguments
@@ -482,6 +500,42 @@ public class Commands {
 
             if (commandnode2.canUse(source)) {
                 ArgumentBuilder argumentbuilder = commandnode2.createBuilder(); // CraftBukkit - decompile error
+                // Paper start
+                /*
+                Because of how commands can be yeeted right left and center due to bad bukkit practices
+                we need to be able to ensure that ALL commands are registered (even redirects).
+
+                What this will do is IF the redirect seems to be "dead" it will create a builder and essentially populate (flatten)
+                all the children from the dead redirect to the node.
+
+                So, if minecraft:msg redirects to msg but the original msg node has been overriden minecraft:msg will now act as msg and will explicilty inherit its children.
+
+                The only way to fix this is to either:
+                - Send EVERYTHING flattened, don't use redirects
+                - Don't allow command nodes to be deleted
+                - Do this :)
+                 */
+
+                // Is there an invalid command redirect?
+                if (argumentbuilder.getRedirect() != null && (CommandNode) resultNodes.get(argumentbuilder.getRedirect()) == null) {
+                    // Create the argument builder with the same values as the specified node, but with a different literal and populated children
+
+                    CommandNode<CommandSourceStack> redirect = argumentbuilder.getRedirect();
+                    // Diff copied from LiteralCommand#createBuilder
+                    final com.mojang.brigadier.builder.LiteralArgumentBuilder<CommandSourceStack> builder = com.mojang.brigadier.builder.LiteralArgumentBuilder.literal(commandnode2.getName());
+                    builder.requires(redirect.getRequirement());
+                    // builder.forward(redirect.getRedirect(), redirect.getRedirectModifier(), redirect.isFork()); We don't want to migrate the forward, since it's invalid.
+                    if (redirect.getCommand() != null) {
+                        builder.executes(redirect.getCommand());
+                    }
+                    // Diff copied from LiteralCommand#createBuilder
+                    for (CommandNode<CommandSourceStack> child : redirect.getChildren()) {
+                        builder.then(child);
+                    }
+
+                    argumentbuilder = builder;
+                }
+                // Paper end
 
                 argumentbuilder.requires((icompletionprovider) -> {
                     return true;
diff --git a/src/main/java/net/minecraft/commands/arguments/MessageArgument.java b/src/main/java/net/minecraft/commands/arguments/MessageArgument.java
index 4d0694c478d476717fd11f8975955c1741b47abf..708d9f68deea92d8d7fc84184da270f631e4cbb8 100644
--- a/src/main/java/net/minecraft/commands/arguments/MessageArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/MessageArgument.java
@@ -35,6 +35,11 @@ public class MessageArgument implements SignedArgument<MessageArgument.Message>
 
     public static void resolveChatMessage(CommandContext<CommandSourceStack> context, String name, Consumer<PlayerChatMessage> callback) throws CommandSyntaxException {
         MessageArgument.Message message = context.getArgument(name, MessageArgument.Message.class);
+    // Paper start
+        resolveChatMessage(message, context, name, callback);
+    }
+    public static void resolveChatMessage(MessageArgument.Message message, CommandContext<CommandSourceStack> context, String name, Consumer<PlayerChatMessage> callback) throws CommandSyntaxException {
+    // Paper end
         CommandSourceStack commandSourceStack = context.getSource();
         Component component = message.resolveComponent(commandSourceStack);
         CommandSigningContext commandSigningContext = commandSourceStack.getSigningContext();
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 9f15d9dbdfa74a0640b1a2b4ff695609d4758a4c..add24b072c353ae968dcadfd100d3fd61255cc2e 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -298,7 +298,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public static int currentTick = 0; // Paper - Further improve tick loop
     public java.util.Queue<Runnable> processQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>();
     public int autosavePeriod;
-    public Commands vanillaCommandDispatcher;
+    // public Commands vanillaCommandDispatcher; // Paper - don't store the vanilla dispatcher
     public boolean forceTicks; // Paper
     // CraftBukkit end
     // Spigot start
@@ -382,7 +382,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         // CraftBukkit start
         this.options = options;
         this.worldLoader = worldLoader;
-        this.vanillaCommandDispatcher = worldstem.dataPackResources().commands; // CraftBukkit
+        // this.vanillaCommandDispatcher = worldstem.dataPackResources().commands; // CraftBukkit // Paper - don't store the vanilla dispatcher
         // Paper start - Handled by TerminalConsoleAppender
         // Try to see if we're actually running in a terminal, disable jline if not
         /*
diff --git a/src/main/java/net/minecraft/server/ServerFunctionManager.java b/src/main/java/net/minecraft/server/ServerFunctionManager.java
index 6483a1d461904a0584b6808b2f86ac7329bba963..978df99fc677895e63dcf87517f5bfc120c44121 100644
--- a/src/main/java/net/minecraft/server/ServerFunctionManager.java
+++ b/src/main/java/net/minecraft/server/ServerFunctionManager.java
@@ -42,7 +42,7 @@ public class ServerFunctionManager {
     }
 
     public CommandDispatcher<CommandSourceStack> getDispatcher() {
-        return this.server.vanillaCommandDispatcher.getDispatcher(); // CraftBukkit
+        return this.server.getCommands().getDispatcher(); // CraftBukkit // Paper - Don't override command dispatcher
     }
 
     public void tick() {
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index d587b2c4e39bce7e098aa9fab361230f72770658..2b3e886c36bb46ee86157acb8158c6d287118d60 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -2466,54 +2466,21 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         }
     }
 
+    @java.lang.Deprecated // Paper
     public void handleCommand(String s) { // Paper - private -> public
-        // Paper Start
-        if (!org.spigotmc.AsyncCatcher.shuttingDown && !org.bukkit.Bukkit.isPrimaryThread()) {
-            LOGGER.error("Command Dispatched Async: " + s);
-            LOGGER.error("Please notify author of plugin causing this execution to fix this bug! see: http://bit.ly/1oSiM6C", new Throwable());
-            Waitable<Void> wait = new Waitable<>() {
-                @Override
-                protected Void evaluate() {
-                    ServerGamePacketListenerImpl.this.handleCommand(s);
-                    return null;
-                }
-            };
-            server.processQueue.add(wait);
-            try {
-                wait.get();
-                return;
-            } catch (InterruptedException e) {
-                Thread.currentThread().interrupt(); // This is proper habit for java. If we aren't handling it, pass it on!
-            } catch (Exception e) {
-                throw new RuntimeException("Exception processing chat command", e.getCause());
-            }
-        }
-        // Paper End
-        co.aikar.timings.MinecraftTimings.playerCommandTimer.startTiming(); // Paper
-        if ( org.spigotmc.SpigotConfig.logCommands ) // Spigot
-        this.LOGGER.info(this.player.getScoreboardName() + " issued server command: " + s);
-
-        CraftPlayer player = this.getCraftPlayer();
-
-        PlayerCommandPreprocessEvent event = new PlayerCommandPreprocessEvent(player, s, new LazyPlayerSet(this.server));
-        this.cserver.getPluginManager().callEvent(event);
-
-        if (event.isCancelled()) {
-            co.aikar.timings.MinecraftTimings.playerCommandTimer.stopTiming(); // Paper
-            return;
+        // Paper start - Remove all this old duplicated logic
+        if (s.startsWith("/")) {
+            s = s.substring(1);
         }
+        /*
+        It should be noted that this represents the "legacy" command execution path.
+        Api can call commands even if there is no additional context provided.
 
-        try {
-            if (this.cserver.dispatchCommand(event.getPlayer(), event.getMessage().substring(1))) {
-                return;
-            }
-        } catch (org.bukkit.command.CommandException ex) {
-            player.sendMessage(org.bukkit.ChatColor.RED + "An internal error occurred while attempting to perform this command");
-            java.util.logging.Logger.getLogger(ServerGamePacketListenerImpl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
-            return;
-        } finally {
-            co.aikar.timings.MinecraftTimings.playerCommandTimer.stopTiming(); // Paper
-        }
+        This method should ONLY be used if you are needing to execute a command WITHOUT
+        an actual player's input.
+        */
+        this.performChatCommand(new ServerboundChatCommandPacket(s, Instant.now(), 0, net.minecraft.commands.arguments.ArgumentSignatures.EMPTY, null), null);
+        // Paper end
     }
     // CraftBukkit end
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 4cd95134811fd65465681d159b2f30cf77455830..a7a3a5cde7a5ba79e5978d69dc4bf415fe9a2066 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -262,11 +262,11 @@ public final class CraftServer implements Server {
     private final Logger logger = Logger.getLogger("Minecraft");
     private final ServicesManager servicesManager = new SimpleServicesManager();
     private final CraftScheduler scheduler = new CraftScheduler();
-    private final CraftCommandMap commandMap = new CraftCommandMap(this);
+    private final CraftCommandMap commandMap; // Paper - Move down
     private final SimpleHelpMap helpMap = new SimpleHelpMap(this);
     private final StandardMessenger messenger = new StandardMessenger();
-    private final SimplePluginManager pluginManager = new SimplePluginManager(this, commandMap);
-    public final io.papermc.paper.plugin.manager.PaperPluginManagerImpl paperPluginManager = new io.papermc.paper.plugin.manager.PaperPluginManagerImpl(this, this.commandMap, pluginManager); {this.pluginManager.paperPluginManager = this.paperPluginManager;} // Paper
+    private final SimplePluginManager pluginManager; // Paper - Move down
+    public final io.papermc.paper.plugin.manager.PaperPluginManagerImpl paperPluginManager; // Paper
     private final StructureManager structureManager;
     protected final DedicatedServer console;
     protected final DedicatedPlayerList playerList;
@@ -316,6 +316,12 @@ public final class CraftServer implements Server {
         this.structureManager = new CraftStructureManager(console.getStructureManager());
 
         Bukkit.setServer(this);
+        // Paper start
+        this.commandMap = new CraftCommandMap(this);
+        this.pluginManager = new SimplePluginManager(this, commandMap);
+        this.paperPluginManager = new io.papermc.paper.plugin.manager.PaperPluginManagerImpl(this, this.commandMap, pluginManager);
+        this.pluginManager.paperPluginManager = this.paperPluginManager;
+         // Paper end
 
         // Register all the Enchantments and PotionTypes now so we can stop new registration immediately after
         Enchantments.SHARPNESS.getClass();
@@ -487,49 +493,11 @@ public final class CraftServer implements Server {
     }
 
     private void setVanillaCommands(boolean first) { // Spigot
-        Commands dispatcher = console.vanillaCommandDispatcher;
-
-        // Build a list of all Vanilla commands and create wrappers
-        for (CommandNode<CommandSourceStack> cmd : dispatcher.getDispatcher().getRoot().getChildren()) {
-            // Spigot start
-            VanillaCommandWrapper wrapper = new VanillaCommandWrapper(dispatcher, cmd);
-            if (org.spigotmc.SpigotConfig.replaceCommands.contains( wrapper.getName() ) ) {
-                if (first) {
-                    this.commandMap.register("minecraft", wrapper);
-                }
-            } else if (!first) {
-                this.commandMap.register("minecraft", wrapper);
-            }
-            // Spigot end
-        }
+        // Paper - Replace implementation
     }
 
     public void syncCommands() {
-        // Clear existing commands
-        Commands dispatcher = console.resources.managers().commands = new Commands();
-
-        // Register all commands, vanilla ones will be using the old dispatcher references
-        for (Map.Entry<String, Command> entry : this.commandMap.getKnownCommands().entrySet()) {
-            String label = entry.getKey();
-            Command command = entry.getValue();
-
-            if (command instanceof VanillaCommandWrapper) {
-                LiteralCommandNode<CommandSourceStack> node = (LiteralCommandNode<CommandSourceStack>) ((VanillaCommandWrapper) command).vanillaCommand;
-                dispatcher.vanillaCommandNodes.add(node); // Paper
-                if (!node.getLiteral().equals(label)) {
-                    LiteralCommandNode<CommandSourceStack> clone = new LiteralCommandNode(label, node.getCommand(), node.getRequirement(), node.getRedirect(), node.getRedirectModifier(), node.isFork());
-
-                    for (CommandNode<CommandSourceStack> child : node.getChildren()) {
-                        clone.addChild(child);
-                    }
-                    node = clone;
-                }
-
-                dispatcher.getDispatcher().getRoot().addChild(node);
-            } else {
-                new BukkitCommandWrapper(this, entry.getValue()).register(dispatcher.getDispatcher(), label);
-            }
-        }
+        Commands dispatcher = this.getHandle().getServer().getCommands(); // Paper - We now register directly to the dispatcher.
 
         // Refresh commands
         for (ServerPlayer player : this.getHandle().players) {
@@ -902,22 +870,32 @@ public final class CraftServer implements Server {
                 throw new RuntimeException("Exception processing dispatch command", e.getCause());
             }
         }
-        // Paper End
-        if (this.commandMap.dispatch(sender, commandLine)) {
-            return true;
-        }
+    // Paper start
+        return this.dispatchCommand(org.bukkit.craftbukkit.command.VanillaCommandWrapper.getListener(sender), commandLine);
+    }
 
-        // Spigot start
-        if (!org.spigotmc.SpigotConfig.unknownCommandMessage.isEmpty()) {
-            // Paper start
-            org.bukkit.event.command.UnknownCommandEvent event = new org.bukkit.event.command.UnknownCommandEvent(sender, commandLine, net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(org.spigotmc.SpigotConfig.unknownCommandMessage));
-            Bukkit.getServer().getPluginManager().callEvent(event);
-            if (event.message() != null) {
-                sender.sendMessage(event.message());
-            }
-            // Paper end
+    public boolean dispatchCommand(CommandSourceStack sourceStack, String commandLine) {
+        net.minecraft.commands.Commands commands = this.getHandle().getServer().getCommands();
+        com.mojang.brigadier.CommandDispatcher<CommandSourceStack> dispatcher = commands.getDispatcher();
+        com.mojang.brigadier.ParseResults<CommandSourceStack> results = dispatcher.parse(commandLine, sourceStack);
+
+        CommandSender sender = sourceStack.getBukkitSender();
+        String[] args = org.apache.commons.lang3.StringUtils.split(commandLine, ' '); // Paper - fix adjacent spaces (from console/plugins) causing empty array elements
+        Command target = this.commandMap.getCommand(args[0].toLowerCase(java.util.Locale.ENGLISH));
+
+        try {
+            commands.performCommand(results, commandLine, commandLine, true);
+        } catch (CommandException ex) {
+            this.pluginManager.callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerCommandException(ex, target, sender, args))); // Paper
+            //target.timings.stopTiming(); // Spigot // Paper
+            throw ex;
+        } catch (Throwable ex) {
+            //target.timings.stopTiming(); // Spigot // Paper
+            String msg = "Unhandled exception executing '" + commandLine + "' in " + target;
+            this.pluginManager.callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerCommandException(ex, target, sender, args))); // Paper
+            throw new CommandException(msg, ex);
         }
-        // Spigot end
+        // Paper end
 
         return false;
     }
@@ -2918,5 +2896,9 @@ public final class CraftServer implements Server {
         return this.potionBrewer;
     }
 
+    @Override
+    public com.mojang.brigadier.CommandDispatcher<io.papermc.paper.command.brigadier.CommandSourceStack> getCommandDispatcher() {
+        return io.papermc.paper.command.brigadier.ApiMirrorRootNode.DISPATCHER_INSTANCE;
+    }
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/command/BukkitCommandWrapper.java b/src/main/java/org/bukkit/craftbukkit/command/BukkitCommandWrapper.java
index 26f3a2799e687731d883e7733591f6934479e88d..f449310eaafec6e0ce5f61cfe8e6f76c3ee57ec9 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/BukkitCommandWrapper.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/BukkitCommandWrapper.java
@@ -20,6 +20,7 @@ import org.bukkit.command.CommandException;
 import org.bukkit.command.CommandSender;
 import org.bukkit.craftbukkit.CraftServer;
 
+@Deprecated(forRemoval = true) // Paper - Don't use
 public class BukkitCommandWrapper implements com.mojang.brigadier.Command<CommandSourceStack>, Predicate<CommandSourceStack>, SuggestionProvider<CommandSourceStack>, com.destroystokyo.paper.brigadier.BukkitBrigadierCommand<CommandSourceStack> { // Paper
 
     private final CraftServer server;
diff --git a/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java b/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
index 6035af2cf08353b3d3801220d8116d8611a0cd37..0a549ce80b63d2e6468245819b23ea512c88e2be 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
@@ -21,18 +21,28 @@ import org.bukkit.command.RemoteConsoleCommandSender;
 import org.bukkit.command.defaults.BukkitCommand;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.entity.CraftMinecartCommand;
-import org.bukkit.craftbukkit.entity.CraftPlayer;
-import org.bukkit.entity.Player;
 import org.bukkit.entity.minecart.CommandMinecart;
 
-public final class VanillaCommandWrapper extends BukkitCommand {
+public class VanillaCommandWrapper extends BukkitCommand { // Paper
 
-    private final Commands dispatcher;
+    //private final Commands dispatcher; // Paper
     public final CommandNode<CommandSourceStack> vanillaCommand;
 
+    // Paper start
+    public VanillaCommandWrapper(String name, String description, String usageMessage, List<String> aliases, Commands dispatcher, CommandNode<CommandSourceStack> vanillaCommand) {
+        super(name, description, usageMessage, aliases);
+        //this.dispatcher = dispatcher; // Paper
+        this.vanillaCommand = vanillaCommand;
+    }
+
+    Commands commands() {
+        return MinecraftServer.getServer().getCommands();
+    }
+
+    // Paper end
     public VanillaCommandWrapper(Commands dispatcher, CommandNode<CommandSourceStack> vanillaCommand) {
         super(vanillaCommand.getName(), "A Mojang provided command.", vanillaCommand.getUsageText(), Collections.EMPTY_LIST);
-        this.dispatcher = dispatcher;
+        // this.dispatcher = dispatcher; // Paper
         this.vanillaCommand = vanillaCommand;
         this.setPermission(VanillaCommandWrapper.getPermission(vanillaCommand));
     }
@@ -42,7 +52,7 @@ public final class VanillaCommandWrapper extends BukkitCommand {
         if (!testPermission(sender)) return true;
 
         CommandSourceStack icommandlistener = VanillaCommandWrapper.getListener(sender);
-        this.dispatcher.performPrefixedCommand(icommandlistener, this.toDispatcher(args, getName()), this.toDispatcher(args, commandLabel));
+        this.commands().performPrefixedCommand(icommandlistener, this.toDispatcher(args, getName()), this.toDispatcher(args, commandLabel)); // Paper
         return true;
     }
 
@@ -53,10 +63,10 @@ public final class VanillaCommandWrapper extends BukkitCommand {
         Validate.notNull(alias, "Alias cannot be null");
 
         CommandSourceStack icommandlistener = VanillaCommandWrapper.getListener(sender);
-        ParseResults<CommandSourceStack> parsed = this.dispatcher.getDispatcher().parse(this.toDispatcher(args, getName()), icommandlistener);
+        ParseResults<CommandSourceStack> parsed = this.commands().getDispatcher().parse(this.toDispatcher(args, getName()), icommandlistener); // Paper
 
         List<String> results = new ArrayList<>();
-        this.dispatcher.getDispatcher().getCompletionSuggestions(parsed).thenAccept((suggestions) -> {
+        this.commands().getDispatcher().getCompletionSuggestions(parsed).thenAccept((suggestions) -> { // Paper
             suggestions.getList().forEach((s) -> results.add(s.getText()));
         });
 
@@ -116,4 +126,10 @@ public final class VanillaCommandWrapper extends BukkitCommand {
     private String toDispatcher(String[] args, String name) {
         return name + ((args.length > 0) ? " " + Joiner.on(' ').join(args) : "");
     }
+    // Paper start
+    @Override
+    public boolean canBeOverriden() {
+        return true;
+    }
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java b/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
index 40b66adcb5aac64212b1937dc506ebb60f2eed83..44287bc95009dc1b6c70443759895ee28ecc54d9 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
@@ -199,15 +199,18 @@ public class SimpleHelpMap implements HelpMap {
     }
 
     private String getCommandPluginName(Command command) {
+        // Paper start - Move up
+        if (command instanceof PluginIdentifiableCommand) {
+            return ((PluginIdentifiableCommand) command).getPlugin().getName();
+        }
+        // Paper end
         if (command instanceof VanillaCommandWrapper) {
             return "Minecraft";
         }
         if (command instanceof BukkitCommand) {
             return "Bukkit";
         }
-        if (command instanceof PluginIdentifiableCommand) {
-            return ((PluginIdentifiableCommand) command).getPlugin().getName();
-        }
+        // Paper - Move PluginIdentifiableCommand instanceof check to allow brig commands
         return null;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 64c50c52c11214740de7903e5592b8b6b2c170b3..de992fa9a532c9d32f2696d87b0e354b8f32b40c 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -616,6 +616,11 @@ public final class CraftMagicNumbers implements UnsafeValues {
         net.minecraft.core.Holder<net.minecraft.world.level.biome.Biome> biomeBase = cra.getHandle().registryAccess().registryOrThrow(net.minecraft.core.registries.Registries.BIOME).getHolderOrThrow(net.minecraft.resources.ResourceKey.create(net.minecraft.core.registries.Registries.BIOME, org.bukkit.craftbukkit.util.CraftNamespacedKey.toMinecraft(biomeKey)));
         cra.setBiome(x, y, z, biomeBase);
     }
+
+    @Override
+    public java.util.Map<String, org.bukkit.command.Command> getCommandMirrorMap() {
+        return new io.papermc.paper.command.brigadier.bukkit.BukkitBrigForwardingMap();
+    }
     // Paper end
 
     /**
diff --git a/src/main/resources/META-INF/services/io.papermc.paper.command.brigadier.MessageComponentSerializer b/src/main/resources/META-INF/services/io.papermc.paper.command.brigadier.MessageComponentSerializer
new file mode 100644
index 0000000000000000000000000000000000000000..2428b577b9bf0eac6947f5d919cbb51f7aca3d50
--- /dev/null
+++ b/src/main/resources/META-INF/services/io.papermc.paper.command.brigadier.MessageComponentSerializer
@@ -0,0 +1 @@
+io.papermc.paper.command.brigadier.MessageComponentSerializerImpl
diff --git a/src/main/resources/META-INF/services/io.papermc.paper.command.brigadier.argument.VanillaArguments$VanillaArgumentProvider b/src/main/resources/META-INF/services/io.papermc.paper.command.brigadier.argument.VanillaArguments$VanillaArgumentProvider
new file mode 100644
index 0000000000000000000000000000000000000000..b2fdb8351c2abb55283850a929d2a87aa6ecb80f
--- /dev/null
+++ b/src/main/resources/META-INF/services/io.papermc.paper.command.brigadier.argument.VanillaArguments$VanillaArgumentProvider
@@ -0,0 +1 @@
+io.papermc.paper.command.brigadier.argument.VanillaArgumentProviderImpl
